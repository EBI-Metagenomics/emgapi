# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-05-08 17:22
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import emgapi.models


class Migration(migrations.Migration):

    dependencies = [
        ('emgapi', '0013_auto_20190507_1304'),
    ]

    operations = [
        migrations.CreateModel(
            name='CogCat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=80, unique=True)),
            ],
            options={
                'db_table': 'COG',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(db_column='GENOME_ACCESSION', max_length=40, unique=True)),
                ('length', models.IntegerField(db_column='LENGTH')),
                ('num_contigs', models.IntegerField(db_column='N_CONTIGS')),
                ('n_50', models.IntegerField(db_column='N50')),
                ('gc_content', models.FloatField(db_column='GC_CONTENT')),
                ('type', models.CharField(choices=[(emgapi.models.GenomeTypes('isolate'), 'isolate'), (emgapi.models.GenomeTypes('mag'), 'mag')], db_column='TYPE', max_length=80)),
                ('completeness', models.FloatField(db_column='COMPLETENESS')),
                ('contamination', models.FloatField(db_column='CONTAMINATION')),
                ('rna_5s', models.FloatField(db_column='RNA_5S')),
                ('rna_16s', models.FloatField(db_column='RNA_16S')),
                ('rna_23s', models.FloatField(db_column='RNA_23S')),
                ('trnas', models.FloatField(db_column='T_RNA')),
                ('num_genomes', models.IntegerField(db_column='NUM_GENOMES')),
                ('num_proteins', models.IntegerField(db_column='NUM_PROTEINS')),
                ('pangenome_size', models.IntegerField(db_column='PANGENOME_SIZE')),
                ('core_prop', models.FloatField(db_column='CORE_PROP')),
                ('accessory_prop', models.FloatField(db_column='ACCESSORY_PROP')),
                ('eggnog_prop', models.FloatField(db_column='EGGNOG_PROP')),
                ('ipr_prop', models.FloatField(db_column='IPR_PROP')),
                ('last_update', models.DateTimeField(auto_now=True, db_column='LAST_UPDATE')),
                ('first_created', models.DateTimeField(auto_now_add=True, db_column='FIRST_CREATED')),
            ],
            options={
                'db_table': 'GENOME',
            },
        ),
        migrations.CreateModel(
            name='GenomeCogCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('cog', models.ForeignKey(db_column='COG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.CogCat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_COG_COUNTS',
            },
        ),
        migrations.CreateModel(
            name='GenomeIprCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_IRP_ENTRIES',
            },
        ),
        migrations.CreateModel(
            name='GenomeKeggCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_KEGG_COUNTS',
            },
        ),
        migrations.CreateModel(
            name='IprEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(db_column='ACCESSION', max_length=80, unique=True)),
            ],
            options={
                'db_table': 'IPR_ENTRIES',
            },
        ),
        migrations.CreateModel(
            name='KeggEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brite_id', models.CharField(db_column='BRITE_ID', max_length=5, unique=True)),
                ('brite_name', models.CharField(db_column='NAME', max_length=80)),
                ('parent', models.ForeignKey(db_column='PARENT', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.KeggEntry')),
            ],
            options={
                'db_table': 'KEGG_BRITE_ENTRIES',
            },
        ),
        migrations.AddField(
            model_name='genomekeggcounts',
            name='kegg_entry',
            field=models.ForeignKey(db_column='KEGG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.KeggEntry'),
        ),
        migrations.AddField(
            model_name='genomeiprcount',
            name='ipr_entry',
            field=models.ForeignKey(db_column='IPR_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.IprEntry'),
        ),
        migrations.AddField(
            model_name='genome',
            name='cog_matches',
            field=models.ManyToManyField(through='emgapi.GenomeCogCounts', to='emgapi.CogCat'),
        ),
        migrations.AddField(
            model_name='genome',
            name='ipr_matches',
            field=models.ManyToManyField(through='emgapi.GenomeIprCount', to='emgapi.IprEntry'),
        ),
        migrations.AddField(
            model_name='genome',
            name='kegg_matches',
            field=models.ManyToManyField(through='emgapi.GenomeKeggCounts', to='emgapi.KeggEntry'),
        ),
        migrations.AlterUniqueTogether(
            name='genomekeggcounts',
            unique_together=set([('genome', 'kegg_entry')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomeiprcount',
            unique_together=set([('genome', 'ipr_entry')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomecogcounts',
            unique_together=set([('genome', 'cog')]),
        ),
    ]
