# Generated by Django 3.2.12 on 2022-09-30 09:47
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import emgapi.validators
import uuid

from emgapianns import models as m_models


"""
This squashed migration creates the EMG database as it was at migration 0043 (2022-08-11), 
whilst populating certain tables to the state they were at that time.
Those tables are things like Download Description Labels, whose data is (should be) updated through
migrations.RunPython steps because some code (e.g. import scripts) relies on hardcoded matches to these data.

Some steps are RunSQL and assume SQL dialect that only works on MySQL. 
These steps have been changed to a helper class (`RunSqlIfMySQL`) so that they can be run on other engines, e.g. SQLite.
This is relevant to the creation of Full Text Indexes. 
"""


class RunSqlIfMySQL(migrations.RunSQL):
    def _run_sql(self, schema_editor, sqls):
        if hasattr(schema_editor.connection, 'mysql_version'):
            super(RunSqlIfMySQL, self)._run_sql(schema_editor, sqls)


def create_group_types(apps, schema_editor):
    DownloadGroupType = apps.get_model("emgapi", "DownloadGroupType")
    group_types = (
        "Sequence data",
        "Functional analysis",
        "Taxonomic analysis",
        "Taxonomic analysis SSU rRNA",
        "Taxonomic analysis LSU rRNA",
        "Statistics",
        "non-coding RNAs",
        "Genome analysis",
        "Pan-genome analysis",
        "Genome release set",
        "Taxonomic analysis ITS",
        "Taxonomic analysis ITSoneDB",
        "Taxonomic analysis UNITE",
        "Pathways and Systems",
        "Taxonomic analysis mOTU",
    )
    _groups = list()
    for group_type in group_types:
        _groups.append(
            DownloadGroupType(group_type=group_type)
        )
    DownloadGroupType.objects.bulk_create(_groups)


def create_fileformats(apps, schema_editor):
    FileFormat = apps.get_model("emgapi", "FileFormat")
    file_formats = (
        ("TSV", "tsv", True),
        ("TSV", "tsv", False),
        ("CSV", "csv", False),
        ("FASTA", "fasta", True),
        ("FASTA", "fasta", False),
        ("Biom", "biom", False),
        ("HDF5 Biom", "biom", False),
        ("JSON Biom", "biom", False),
        ("Newick format", "tree", False),
        ("SVG", "svg", False),
        ("TAB", "tab", False),
        ("GFF", "gff", False),
        ("JSON", "json", False),
        ("FAI", "fai", False),
        ("EMBL", "embl", True),
        ("GenBank", "gbk", True),
        ("Newick format", "nwk", False),
        ("GFF", "gff", True),
    )
    _formats = list()
    for file_format in file_formats:
        _formats.append(
            FileFormat(
                format_name=file_format[0],
                format_extension=file_format[1],
                compression=file_format[2],
            )
        )
    FileFormat.objects.bulk_create(_formats)


def create_subdirs(apps, schema_editor):
    DownloadSubdir = apps.get_model("emgapi", "DownloadSubdir")
    subdirs = (
        "version_1.0/project-summary",
        "version_2.0/project-summary",
        "version_3.0/project-summary",
        "version_4.0/project-summary",
        "version_4.1/project-summary",
        "sequence-categorisation",
        "otus",
        "otus/rdp_assigned_taxonomy",
        "cr_otus",
        "taxonomy-summary",
        "qc-statistics",
        "charts",
        "RNA-selector",
        "RNASelection",
        "taxonomy-summary/SSU",
        "taxonomy-summary/LSU",
        "genome",
        "pan-genome",
        "version_5.0/project-summary",
        "taxonomy-summary/its",
        "taxonomy-summary/its/itsonedb",
        "taxonomy-summary/its/unite",
        "functional-annotation",
        "functional-annotation/stats",
        "pathways-systems",
    )
    _subdirs = list()
    for subdir in subdirs:
        _subdirs.append(
            DownloadSubdir(
                subdir=subdir
            )
        )
    DownloadSubdir.objects.bulk_create(_subdirs)


def create_download_description(apps, schema_editor):
    DownloadDescriptionLabel = apps.get_model("emgapi", "DownloadDescriptionLabel")
    downloads = (
        ("Processed nucleotide reads", "Processed nucleotide reads",),
        ("All reads that have predicted CDS", "Processed reads with pCDS",),
        ("All reads with an interproscan match", "Processed reads with annotation",),
        ("All reads with a predicted CDS but no interproscan match", "Processed reads without annotation",),
        ("All predicted CDS", "Predicted CDS (aa)",),
        ("Predicted coding sequences with InterPro match (FASTA)", "Predicted CDS with annotation",),
        ("Predicted CDS without annotation", "Predicted CDS without annotation",),
        ("Predicted open reading frames without annotation (FASTA)", "Predicted ORF without annotation",),
        ("All reads encoding 5S rRNA", "Reads encoding 5S rRNA",),
        ("All reads encoding 16S rRNA", "Reads encoding 16S rRNA",),
        ("All reads encoding 23S rRNA", "Reads encoding 23S rRNA",),
        ('OTUs, counts and taxonomic assignments',
         'OTUs, counts and taxonomic assignments'),
        ('OTUs, counts and taxonomic assignments for SSU rRNA',
         'OTUs, counts and taxonomic assignments for SSU rRNA'),
        ('OTUs, counts and taxonomic assignments for LSU rRNA',
         'OTUs, counts and taxonomic assignments for LSU rRNA'),
        ('MAPseq SSU assignments', 'MAPseq SSU assignments'),
        ('MAPseq LSU assignments', 'MAPseq LSU assignments'),
        ('Processed contigs', 'Processed contigs'),
        ('Processed contigs with pCDS', 'Processed contigs with pCDS'),
        ('Processed contigs with annotation', 'Processed contigs with annotation'),
        ('Processed contigs without annotation',
         'Processed contigs without annotation'),
        ('Contigs encoding 5S rRNA', 'Contigs encoding 5S rRNA'),
        ('Contigs encoding 16S rRNA', 'Contigs encoding 16S rRNA'),
        ('Contigs encoding 23S rRNA', 'Contigs encoding 23S rRNA'),
        ('Contigs encoding SSU rRNA', 'Contigs encoding SSU rRNA'),
        ('Contigs encoding LSU rRNA', 'Contigs encoding LSU rRNA'),
        ('Predicted ORF with annotation', 'Predicted ORF with annotation'),
        # ("OTUs and taxonomic assignments", "OTUs, reads and taxonomic assignments",),
        ("Phylogenetic tree (Newick format)", "Phylogenetic tree",),
        ("All reads encoding SSU rRNA", "Reads encoding SSU rRNA",),
        # ("OTUs and taxonomic assignments for SSU rRNA", "OTUs, reads and taxonomic assignments for SSU rRNA",),
        ("All reads encoding LSU rRNA", "Reads encoding LSU rRNA",),
        # ("OTUs and taxonomic assignments for LSU rRNA", "OTUs, reads and taxonomic assignments for LSU rRNA",),
        ("InterPro matches (TSV)", "InterPro matches",),
        ("Complete GO annotation", "Complete GO annotation",),
        ("GO slim annotation", "GO slim annotation",),
        ("tRNAs predicted using HMMER tools", "Predicted tRNAs",),
        ("Phylum level taxonomies (TSV)", "Phylum level taxonomies",),
        ("Taxonomic assignments (TSV)", "Taxonomic assignments",),
        ("Taxonomic diversity metrics (TSV.", "Taxonomic diversity metrics",),
        ("Taxonomic diversity metrics SSU rRNA (TSV).", "Taxonomic diversity metrics SSU",),
        ("Taxonomic diversity metrics LSU rRNA (TSV)", "Taxonomic diversity metrics LSU",),
        ("Phylum level taxonomies SSU (TSV)", "Phylum level taxonomies SSU",),
        ("Phylum level taxonomies LSU (TSV)", "Phylum level taxonomies LSU",),
        ("Taxonomic assignments SSU (TSV)", "Taxonomic assignments SSU",),
        ("Taxonomic assignments LSU (TSV)", "Taxonomic assignments LSU",),
        ("PCA for runs (based on phylum proportions)", "PCA for runs (based on phylum proportions)",),
        ("Taxa abundance distribution", "Taxa abundance distribution",),
        ("Predicted Alphaproteobacteria transfer-messenger RNA (RF01849)", "Predicted alpha tmRNA",),
        ("Predicted Archaeal signal recognition particle RNA (RF01857)", "Predicted Archaea SRP RNA",),
        (
        "Predicted Bacterial large signal recognition particle RNA (RF01854)", "Predicted Bacteria large SRP RNA",),
        (
        "Predicted Bacterial small signal recognition particle RNA (RF00169)", "Predicted Bacteria small SRP RNA",),
        ("Predicted Betaproteobacteria transfer-messenger RNA (RF01850)", "Predicted beta tmRNA",),
        ("Predicted Cyanobacteria transfer-messenger RNA (RF01851)", "Predicted cyano tmRNA",),
        ("Predicted Dictyostelium signal recognition particle RNA (RF01570)", "Predicted Dictyostelium SRP RNA",),
        ("Predicted Fungal signal recognition particle RNA (RF01502)", "Predicted Fungi SRP RNA",),
        ("Predicted Metazoan signal recognition particle RNA (RF00017)", "Predicted Metazoa SRP RNA"),
        ("Predicted Mitochondrion-encoded tmRNA (RF02544)", "Predicted mt-tmRNA"),
        ("Predicted Plant signal recognition particle RNA (RF01855)", "Predicted Plant SRP RNA"),
        ("Predicted Protozoan signal recognition particle RNA (RF01856)", "Predicted Protozoa SRP RNA"),
        ("Predicted RNase MRP RNA (RF00030)", "Predicted RNase MRP RNA"),
        ("Predicted Archaeal RNase P RNA (RF00373)", "Predicted Archaeal RNase P RNA"),
        ("Predicted Bacterial RNase P class A (RF00010)", "Predicted Bacterial RNase P class A RNA"),
        ("Predicted Bacterial RNase P class B (RF00011)", "Predicted Bacterial RNase P class B RNA"),
        ("Predicted Plasmodium RNase P (RF01577)", "Predicted Plasmodium RNase P"),
        ("Predicted Nuclear RNase P (RF00009)", "Predicted Nuclear RNase P"),
        ("Predicted transfer-messenger RNA (RF00023)", "Predicted tmRNA"),
        ("Predicted transfer RNA (RF00005)", "Predicted tRNA"),
        ("Predicted Selenocysteine transfer RNA (RF01852)", "Predicted tRNA-Sec"),
        ("Predicted 5.8S ribosomal RNA (RF00002)", "Predicted 5.8S rRNA"),
        ("Predicted Bacterial small subunit ribosomal RNA (RF00177)", "Predicted Bacterial SSU rRNA"),
        ("Predicted Archaeal small subunit ribosomal RNA  (RF01959)", "Predicted Archaeal SSU rRNA"),
        ("Predicted Eukaryotic small subunit ribosomal RNA (RF01960)", "Predicted Eukaryotic SSU rRNA"),
        ("Predicted Archaeal large subunit ribosomal RNA  (RF02540)", "Predicted Archaeal LSU rRNA"),
        ("Predicted Bacterial large subunit ribosomal RNA (RF02541)", "Predicted Bacterial LSU rRNA"),
        ("Predicted Microsporidia small subunit ribosomal RNA (RF02542)", "Predicted Microsporidia SSU rRNA"),
        ("Predicted Eukaryotic large subunit ribosomal RNA (RF02543)", "Predicted Eukaryotic LSU rRNA"),
        ("Predicted Trypanosomatid mitochondrial large subunit ribosomal RNA (RF02546)",
         "Predicted trypano mito LSU rRNA"),
        ("Predicted Permuted mitochondrial genome encoded 5S rRNA (RF02547)", "Predicted mtPerm-5S rRNA"),
        ("All reads encoding 5.8S", "Reads encoding 5.8S"),
        ("All reads encoding 5S", "Reads encoding 5S"),
        ("All contigs encoding 5.8S", "Contigs encoding 5.8S"),
        ("All contigs encoding 5S", "Contigs encoding 5S"),
        ("All reads encoding ITS", "Reads encoding ITS (with SSU and LSU sequences masked)"),
        ("Taxonomic assignments (TSV)", "MAPseq ITSoneDB assignments"),
        ("Taxonomic assignments (TSV)", "MAPseq UNITE assignments"),
        ("OTUs and taxonomic assignments", "OTUs, counts and taxonomic assignments for ITSOneDB"),
        ("OTUs and taxonomic assignments", "OTUs, counts and taxonomic assignments for UNITE"),
        ("Complete Pfam annotation", "Pfam annotation"),
        ("KEGG orthologues annotation", "KEGG orthologues annotation"),
        ("Genome Properties annotation", "Genome Properties annotation"),
        ("antiSMASH annotation", "antiSMASH annotation"),
        ("Diamond annotation", "Diamond annotation"),
        ("KEGG pathway annotation", "KEGG pathway annotation"),
        ("All predicted ORF", "Predicted ORF (nt)"),
        ("Phylum level taxonomies UNITE (TSV)", "Phylum level taxonomies UNITE"),
        ("Phylum level taxonomies ITSoneDB (TSV)", "Phylum level taxonomies ITSoneDB"),
        ("Taxonomic assignments UNITE (TSV)", "Taxonomic assignments UNITE"),
        ("Taxonomic assignments ITSoneDB (TSV)", "Taxonomic assignments ITSoneDB"),
        ("Genome GFF file with antiSMASH geneclusters annotations", "Genome antiSMASH Annotation"),
        ("Tree generated from the pairwise Mash distances of conspecific genomes",
         "Pairwise Mash distances of conspecific genomes"),
        ("antiSMASH summary", "antiSMASH summary"),
        ("KEGG pathway annotation (contig)", "KEGG pathway annotation (contig)"),
        ("InterPro summary", "InterPro summary"),
        ("mOTUs taxonomic profile", "mOTUs taxonomic profile"),
        # ("Protein sequence FASTA file of the species representative", "Predicted CDS",),
        ("DNA sequence FASTA file of the genome assembly of the species representative", "Nucleic Acid Sequence",),
        ("DNA sequence FASTA file index of the genome assembly of the species representative",
         "Nucleic Acid Sequence index",),
        ("Protein sequence of the accessory genome", "Protein sequence (accessory)",),
        ("Protein sequence of the core genome", "Protein sequence (core)",),
        ("eggNOG annotations of the protein coding sequences", "eggNOG annotation",),
        ("eggNOG annotations of the core and accessory genes", "eggNOG annotation (core and accessory)",),
        ("InterProScan annotation of the protein coding sequences", "InterProScan annotation",),
        ("InterProScan annotations of the core and accessory genes", "InterProScan annotation (core and accessory)",),
        ("Presence/absence binary matrix of the pan-genome across all conspecific genomes",
         "Gene Presence / Absence matrix",),
        ("Protein sequence FASTA file of core genes (>=90% of the " +
         "genomes with >=90% amino acid identity)", "Core predicted CDS",),
        ("Protein sequence FASTA file of accessory genes", "Accessory predicted CDS",),
        ("Protein sequence FASTA file of core and accessory genes", "Core & Accessory predicted CDS",),
        ("Genome GFF file with various sequence annotations", "Genome Annotation"),
        ("Phylogenetic tree of catalogue genomes", 'Phylogenetic tree of catalogue genomes'),
        ("Combined (eggNOG, InterPro, antiSMASH) annotation", "Combined (eggNOG, InterPro, antiSMASH) annotation"),
        ("TSV formatted file containing eggNOG seed orthologs", "eggNOG seed orthologs"),
        ("DNA sequence FASTA file of the pangenome", "Pangenome DNA sequence"),
        ("List of core genes in the entire pangenome", "Pangenome core genes list"),
        ("rRNA sequence of the genome species representative", "Genome rRNA Sequence"),
    )
    _downloads = list()
    for d in downloads:
        _downloads.append(
            DownloadDescriptionLabel(
                description=d[0],
                description_label=d[1]
            )
        )
    DownloadDescriptionLabel.objects.bulk_create(_downloads)


def populate_status(apps, schema_editor):
    Status = apps.get_model("emgapi", "Status")
    st = (
        (1, "draft"),
        (2, "private"),
        (3, "cancelled"),
        (4, "public"),
        (5, "suppressed"),
        (6, "killed"),
        (7, "temporary_suppressed"),
        (8, "temporary_killed"),
    )
    _statuses = list()
    for s in st:
        _statuses.append(
            Status(
                status_id=s[0],
                status=s[1],
            )
        )
    Status.objects.bulk_create(_statuses)


def create_pipeline_v5(apps, schema_editor):
    Pipeline = apps.get_model("emgapi", "Pipeline")

    obj, created = Pipeline.objects.get_or_create(pipeline_id=6,
                                                  description='Release of version 5.0',
                                                  changes='Major upgrade.',
                                                  release_version='5.0',
                                                  release_date='2019-11-06')


def add_antismash_clusters(apps, schema_editor):
    """antiSMASM GC
    https://docs.antismash.secondarymetabolites.org/glossary/
    """
    genecluster_types = [
        ['acyl_amino_acids', 'N-acyl amino acid cluster'],
        ['amglyccycl', 'Aminoglycoside/aminocyclitol cluster'],
        ['aminocoumarin', 'Aminocoumarin cluster'],
        ['arylpolyene', 'Aryl polyene cluster'],
        ['bacteriocin', 'Bacteriocin or other unspecified ribosomally ' +
                        'synthesised and post-translationally modified peptide product (RiPP) cluster'],
        ['betalactone', 'beta-lactone containing protease inhibitor'],
        ['blactam', 'Î²-lactam cluster'],
        ['bottromycin', 'Bottromycin cluster'],
        ['butyrolactone', 'Butyrolactone cluster'],
        ['CDPS', 'tRNA-dependent cyclodipeptide synthases'],
        ['cyanobactin', 'Cyanobactin cluster'],
        ['ectoine', 'Ectoine cluster'],
        ['fatty_acid', 'Fatty acid cluster (loose strictness, likely from primary metabolism)'],
        ['fungal-RiPP', 'Fungal RiPP with POP or UstH peptidase types and a modification'],
        ['furan', 'Furan cluster'],
        ['fused', 'Pheganomycin-style protein ligase-containing cluster'],
        ['glycocin', 'Glycocin cluster'],
        ['halogenated', 'Cluster containing a halogenase and thus potentially generating a halogenated product'],
        ['head_to_tail', 'Head-to-tail cyclised (subtilosin-like) cluster'],
        ['hglE-KS', 'heterocyst glycolipid synthase-like PKS'],
        ['hserlactone', 'Homoserine lactone cluster'],
        ['indole', 'Indole cluster'],
        ['ladderane', 'Ladderane cluster'],
        ['lanthipeptide', 'Lanthipeptide cluster'],
        ['LAP', 'Linear azol(in)e-containing peptides'],
        ['lassopeptide', 'Lasso peptide cluster'],
        ['linaridin', 'Linaridin cluster'],
        ['lipolanthine', 'Lanthipeptide class containing N-terminal fatty acids'],
        ['melanin', 'Melanin cluster'],
        ['microviridin', 'Microviridin cluster'],
        ['NAGGN', 'N-acetylglutaminylglutamine amide'],
        ['nrps-like', 'NRPS-like fragment'],
        ['nrps', 'Non-ribosomal peptide synthetase cluster'],
        ['nucleoside', 'Nucleoside cluster'],
        ['oligosaccharide', 'Oligosaccharide cluster'],
        ['other', 'Cluster containing a secondary metabolite-related protein that does not fit into any other category'],
        ['PBDE', 'Polybrominated diphenyl ether cluster'],
        ['phenazine', 'Phenazine cluster'],
        ['phosphoglycolipid', 'Phosphoglycolipid cluster'],
        ['phosphonate', 'Phosphonate cluster'],
        ['PKS-like', 'Other types of PKS cluster'],
        ['PpyS-KS', 'PPY-like pyrone cluster'],
        ['proteusin', 'Proteusin cluster'],
        ['PUFA', 'Polyunsaturated fatty acid cluster'],
        ['RaS-RiPP', 'Streptide-like thioether-bond RiPPs'],
        ['resorcinol', 'Resorcinol cluster'],
        ['saccharide', 'Saccharide cluster (loose strictness, likely from primary metabolism)'],
        ['sactipeptide', 'Sactipeptide cluster'],
        ['siderophore', 'Siderophore cluster'],
        ['T1PKS', 'Type I PKS (Polyketide synthase)'],
        ['T2PKS', 'Type II PKS'],
        ['T3PKS', 'Type III PKS'],
        ['terpene', 'Terpene'],
        ['thioamide-NRP', 'Thioamide-containing non-ribosomal peptide'],
        ['thiopeptide', 'Thiopeptide cluster'],
        ['transAT-PKS', 'Trans-AT PKS fragment, with trans-AT domain not found'],
        ['transAT-PKS', 'Trans-AT PKS']
    ]
    for accession, description in genecluster_types:
        m_models.AntiSmashGeneCluster.objects(accession=accession) \
                                     .modify(upsert=True, new=True, set__description=description)


def create_summary_var_names(apps, schema_editor):
    AnalysisMetadataVariableNames = apps.get_model("emgapi", "AnalysisMetadataVariableNames")
    var_names = (
        ("Submitted nucleotide sequences", "n/a"),
        ("Nucleotide sequences after format-specific filtering", "n/a"),
        ("Nucleotide sequences after length filtering", "n/a"),
        ("Nucleotide sequences after undetermined bases filtering", "n/a"),
        ("Reads with predicted CDS", "n/a"),
        ("Reads with predicted RNA", "n/a"),
        ("Reads with InterProScan match", "n/a"),
        ("Predicted CDS", "n/a"),
        ("Predicted CDS with InterProScan match", "n/a"),
        ("Total InterProScan matches", "n/a"),
        ("Nucleotide sequences after clustering", "n/a"),
        ("Nucleotide sequences after repeat masking and filtering", "n/a"),
        ("Reads with predicted rRNA", "n/a"),
        ("Predicted SSU sequences",
         "Number of sequences with predicted SSU rRNAs. Since pipeline version 5 we generate a file with RNA-counts.",
         "n/a"),
        ("Predicted LSU sequences", "Number of sequences with predicted LSU rRNAs. Since pipeline version 5 we generate a file with RNA-counts.", "n/a"),
        ("Contigs with InterProScan match", "n/a"),
        ("Contigs with predicted CDS", "n/a"),
        ("Contigs with predicted RNA", "n/a"),
        ("Nucleotide sequences with predicted CDS", "n/a"),
        ("Nucleotide sequences with predicted RNA", "n/a"),
        ("Nucleotide sequences with InterProScan match", "n/a"),
    )
    _var_names = list()
    for var_name in var_names:
        _var_names.append(
            AnalysisMetadataVariableNames(
                var_name=var_name[0],
                description=var_name[1]
            )
        )
    AnalysisMetadataVariableNames.objects.bulk_create(_var_names)


def remove_antismash_clusters(apps, schema_editor):
    """Remove geneclusters types from mongo
    """
    m_models.AntiSmashGeneCluster.objects.all().delete()


def add_checksum_algorithms(apps, schema_editor):
    """
    Add hash algorithms:
    - SHA1
    - SHA256
    - MD5
    """
    ChecksumAlgorithms = apps.get_model("emgapi", "ChecksumAlgorithm")
    for alg in ["SHA1", "SHA256", "MD5"]:
        ChecksumAlgorithms.objects.get_or_create(name=alg)


def remove_checksum_algorithms(apps, schema_editor):
    """
    Remove hash algorithms:
    - SHA1
    - SHA256
    - MD5
    """
    ChecksumAlgorithms = apps.get_model("emgapi", "ChecksumAlgorithm")
    for alg in ["SHA1", "SHA256", "MD5"]:
        try:
            ChecksumAlgorithms.objects.get(name=alg).delete()
        except ChecksumAlgorithms.DoesNotExist:
            pass


def populate_experiment_types(apps, schema_editor):
    ExperimentType = apps.get_model("emgapi", "ExperimentType")
    experiment_types = (
        (1, "metatranscriptomic"),
        (2, "metagenomic"),
        (3, "amplicon"),
        (4, "assembly"),
        (5, "metabarcoding"),
        (6, "unknown"),
        (7, "hybrid_assembly"),
        (8, "long_reads_assembly"),
    )
    _ets = list()
    for etid, et in experiment_types:
        _ets.append(
            ExperimentType(experiment_type_id=etid, experiment_type=et)
        )
    ExperimentType.objects.bulk_create(_ets)


class Migration(migrations.Migration):

    replaces = [('emgapi', '0001_initial'), ('emgapi', '0002_cleanup_and_rename'), ('emgapi', '0003_annotations'), ('emgapi', '0004_analysisjobann'), ('emgapi', '0005_study_sample_optional'), ('emgapi', '0006_download'), ('emgapi', '0007_split_run'), ('emgapi', '0008_study_accession'), ('emgapi', '0009_remove_gsccvcv'), ('emgapi', '0010_run_assembly_split'), ('emgapi', '0011_study_is_public'), ('emgapi', '0012_auto_20190507_1219'), ('emgapi', '0013_emgapi_ann_pk_fix'), ('emgapi', '0014_study_publication_pk_fix'), ('emgapi', '0015_genomes'), ('emgapi', '0016_auto_20190913_1512'), ('emgapi', '0017_auto_20190918_1239'), ('emgapi', '0018_auto_20191105_1052'), ('emgapi', '0019_auto_20200110_1455'), ('emgapi', '0020_auto_20200114_1501'), ('emgapi', '0021_auto_20200218_2005'), ('emgapi', '0022_auto_20200219_1526'), ('emgapi', '0023_auto_20200415_1055'), ('emgapi', '0024_auto_20200505_1737'), ('emgapi', '0025_auto_20200605_1838'), ('emgapi', '0026_auto_20200612_1102'), ('emgapi', '0027_auto_20200706_1823'), ('emgapi', '0028_auto_20200706_1823'), ('emgapi', '0029_auto_20201022_1359'), ('emgapi', '0030_auto_20210414_1302'), ('emgapi', '0031_superstudy_url_slug'), ('emgapi', '0032_auto_20210615_0939'), ('emgapi', '0033_multiple_genome_cats'), ('emgapi', '0034_alter_genomecataloguedownload_unique_together'), ('emgapi', '0035_auto_20211130_1133'), ('emgapi', '0036_auto_20211202_1412'), ('emgapi', '0037_remove_genome_num_genomes_non_redundant'), ('emgapi', '0038_legacyassembly'), ('emgapi', '0039_run_ena_study_accession'), ('emgapi', '0040_auto_20220721_0958'), ('emgapi', '0041_migrate_status_to_suppressed_and_private'), ('emgapi', '0042_auto_20220722_0745'), ('emgapi', '0043_auto_20220811_1308')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('pipeline_id', models.AutoField(db_column='PIPELINE_ID', primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, db_column='DESCRIPTION', null=True)),
                ('changes', models.TextField(db_column='CHANGES')),
                ('release_version', models.CharField(db_column='RELEASE_VERSION', max_length=20)),
                ('release_date', models.DateField(db_column='RELEASE_DATE')),
            ],
            options={
                'db_table': 'PIPELINE_RELEASE',
                'ordering': ('release_version',),
                'unique_together': {('pipeline_id', 'release_version')},
            },
        ),
        migrations.CreateModel(
            name='PipelineTool',
            fields=[
                ('tool_id', models.SmallIntegerField(db_column='TOOL_ID', primary_key=True, serialize=False)),
                ('tool_name', models.CharField(blank=True, db_column='TOOL_NAME', max_length=30, null=True)),
                ('description', models.TextField(blank=True, db_column='DESCRIPTION', null=True)),
                ('web_link', models.CharField(blank=True, db_column='WEB_LINK', max_length=500, null=True)),
                ('version', models.CharField(blank=True, db_column='VERSION', max_length=30, null=True)),
                ('exe_command', models.CharField(blank=True, db_column='EXE_COMMAND', max_length=500, null=True)),
                ('installation_dir', models.CharField(blank=True, db_column='INSTALLATION_DIR', max_length=200, null=True)),
                ('configuration_file', models.TextField(blank=True, db_column='CONFIGURATION_FILE', null=True)),
                ('notes', models.TextField(blank=True, db_column='NOTES', null=True)),
            ],
            options={
                'db_table': 'PIPELINE_TOOL',
                'unique_together': {('tool_name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisStatus',
            fields=[
                ('analysis_status_id', models.AutoField(db_column='ANALYSIS_STATUS_ID', primary_key=True, serialize=False)),
                ('analysis_status', models.CharField(db_column='ANALYSIS_STATUS', max_length=25)),
            ],
            options={
                'db_table': 'ANALYSIS_STATUS',
                'ordering': ('analysis_status_id',),
            },
        ),
        migrations.CreateModel(
            name='Biome',
            fields=[
                ('biome_id', models.SmallIntegerField(db_column='BIOME_ID', primary_key=True, serialize=False)),
                ('biome_name', models.CharField(db_column='BIOME_NAME', max_length=60)),
                ('lft', models.SmallIntegerField(db_column='LFT')),
                ('rgt', models.SmallIntegerField(db_column='RGT')),
                ('depth', models.IntegerField(db_column='DEPTH')),
                ('lineage', models.CharField(db_column='LINEAGE', max_length=500)),
            ],
            options={
                'db_table': 'BIOME_HIERARCHY_TREE',
                'ordering': ('biome_id',),
                'unique_together': {('biome_id', 'biome_name')},
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('pub_id', models.AutoField(db_column='PUB_ID', primary_key=True, serialize=False)),
                ('authors', models.CharField(blank=True, db_column='AUTHORS', max_length=4000, null=True)),
                ('doi', models.CharField(blank=True, db_column='DOI', max_length=1500, null=True)),
                ('isbn', models.CharField(blank=True, db_column='ISBN', max_length=100, null=True)),
                ('iso_journal', models.CharField(blank=True, db_column='ISO_JOURNAL', max_length=255, null=True)),
                ('issue', models.CharField(blank=True, db_column='ISSUE', max_length=55, null=True)),
                ('medline_journal', models.CharField(blank=True, db_column='MEDLINE_JOURNAL', max_length=255, null=True)),
                ('pub_abstract', models.TextField(blank=True, db_column='PUB_ABSTRACT', null=True)),
                ('pubmed_central_id', models.IntegerField(blank=True, db_column='PUBMED_CENTRAL_ID', null=True)),
                ('pubmed_id', models.IntegerField(blank=True, db_column='PUBMED_ID', null=True)),
                ('pub_title', models.CharField(db_column='PUB_TITLE', max_length=740)),
                ('raw_pages', models.CharField(blank=True, db_column='RAW_PAGES', max_length=30, null=True)),
                ('url', models.CharField(blank=True, db_column='URL', max_length=740, null=True)),
                ('volume', models.CharField(blank=True, db_column='VOLUME', max_length=55, null=True)),
                ('published_year', models.SmallIntegerField(blank=True, db_column='PUBLISHED_YEAR', null=True)),
                ('pub_type', models.CharField(blank=True, db_column='PUB_TYPE', max_length=150, null=True)),
            ],
            options={
                'db_table': 'PUBLICATION',
                'ordering': ('pubmed_id',),
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('study_id', models.AutoField(db_column='STUDY_ID', primary_key=True, serialize=False)),
                ('centre_name', models.CharField(blank=True, db_column='CENTRE_NAME', max_length=255, null=True)),
                ('experimental_factor', models.CharField(blank=True, db_column='EXPERIMENTAL_FACTOR', max_length=255, null=True)),
                ('is_public', models.IntegerField(blank=True, db_column='IS_PUBLIC', null=True)),
                ('public_release_date', models.DateField(blank=True, db_column='PUBLIC_RELEASE_DATE', null=True)),
                ('study_abstract', models.TextField(blank=True, db_column='STUDY_ABSTRACT', null=True)),
                ('accession', models.CharField(db_column='EXT_STUDY_ID', max_length=20, unique=True)),
                ('study_name', models.CharField(blank=True, db_column='STUDY_NAME', max_length=255, null=True)),
                ('study_status', models.CharField(blank=True, db_column='STUDY_STATUS', max_length=30, null=True)),
                ('data_origination', models.CharField(blank=True, db_column='DATA_ORIGINATION', max_length=20, null=True)),
                ('author_email', models.CharField(blank=True, db_column='AUTHOR_EMAIL', max_length=100, null=True)),
                ('author_name', models.CharField(blank=True, db_column='AUTHOR_NAME', max_length=100, null=True)),
                ('last_update', models.DateTimeField(db_column='LAST_UPDATE')),
                ('submission_account_id', models.CharField(blank=True, db_column='SUBMISSION_ACCOUNT_ID', max_length=15, null=True)),
                ('result_directory', models.CharField(blank=True, db_column='RESULT_DIRECTORY', max_length=100, null=True)),
                ('first_created', models.DateTimeField(db_column='FIRST_CREATED')),
                ('project_id', models.CharField(blank=True, db_column='PROJECT_ID', max_length=18, null=True)),
                ('biome', models.ForeignKey(db_column='BIOME_ID', on_delete=django.db.models.deletion.CASCADE, related_name='studies', to='emgapi.biome')),
            ],
            options={
                'db_table': 'STUDY',
                'ordering': ('accession',),
                'unique_together': {('study_id', 'accession')},
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('sample_id', models.AutoField(db_column='SAMPLE_ID', primary_key=True, serialize=False)),
                ('analysis_completed', models.DateField(blank=True, db_column='ANALYSIS_COMPLETED', null=True)),
                ('collection_date', models.DateField(blank=True, db_column='COLLECTION_DATE', null=True)),
                ('geo_loc_name', models.CharField(blank=True, db_column='GEO_LOC_NAME', max_length=255, null=True)),
                ('is_public', models.IntegerField(blank=True, db_column='IS_PUBLIC', null=True)),
                ('metadata_received', models.DateTimeField(blank=True, db_column='METADATA_RECEIVED', null=True)),
                ('sample_desc', models.TextField(blank=True, db_column='SAMPLE_DESC', null=True)),
                ('sequencedata_archived', models.DateTimeField(blank=True, db_column='SEQUENCEDATA_ARCHIVED', null=True)),
                ('sequencedata_received', models.DateTimeField(blank=True, db_column='SEQUENCEDATA_RECEIVED', null=True)),
                ('environment_biome', models.CharField(blank=True, db_column='ENVIRONMENT_BIOME', max_length=255, null=True)),
                ('environment_feature', models.CharField(blank=True, db_column='ENVIRONMENT_FEATURE', max_length=255, null=True)),
                ('environment_material', models.CharField(blank=True, db_column='ENVIRONMENT_MATERIAL', max_length=255, null=True)),
                ('study', models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='emgapi.study')),
                ('sample_name', models.CharField(blank=True, db_column='SAMPLE_NAME', max_length=255, null=True)),
                ('sample_alias', models.CharField(blank=True, db_column='SAMPLE_ALIAS', max_length=255, null=True)),
                ('host_tax_id', models.IntegerField(blank=True, db_column='HOST_TAX_ID', null=True)),
                ('accession', models.CharField(db_column='EXT_SAMPLE_ID', max_length=20)),
                ('species', models.CharField(blank=True, db_column='SPECIES', max_length=255, null=True)),
                ('latitude', models.DecimalField(blank=True, db_column='LATITUDE', decimal_places=4, max_digits=7, null=True)),
                ('longitude', models.DecimalField(blank=True, db_column='LONGITUDE', decimal_places=4, max_digits=7, null=True)),
                ('last_update', models.DateTimeField(db_column='LAST_UPDATE')),
                ('submission_account_id', models.CharField(blank=True, db_column='SUBMISSION_ACCOUNT_ID', max_length=15, null=True)),
                ('biome', models.ForeignKey(db_column='BIOME_ID', on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='emgapi.biome')),
            ],
            options={
                'db_table': 'SAMPLE',
                'ordering': ('accession',),
                'unique_together': {('sample_id', 'accession')},
            },
        ),
        migrations.CreateModel(
            name='ExperimentType',
            fields=[
                ('experiment_type_id', models.AutoField(db_column='EXPERIMENT_TYPE_ID', primary_key=True, serialize=False)),
                ('experiment_type', models.CharField(db_column='EXPERIMENT_TYPE', max_length=30)),
            ],
            options={
                'db_table': 'EXPERIMENT_TYPE',
            },
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('accession', models.CharField(db_column='EXTERNAL_RUN_IDS', max_length=100, primary_key=True, serialize=False)),
                ('run_status_id', models.IntegerField(blank=True, db_column='RUN_STATUS_ID', null=True)),
                ('instrument_platform', models.CharField(blank=True, db_column='INSTRUMENT_PLATFORM', max_length=50, null=True)),
                ('instrument_model', models.CharField(blank=True, db_column='INSTRUMENT_MODEL', max_length=50, null=True)),
            ],
            options={
                'db_table': 'ANALYSIS_JOB',
                'ordering': ('accession',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StudyErrorType',
            fields=[
                ('error_id', models.IntegerField(db_column='ERROR_ID', primary_key=True, serialize=False)),
                ('error_type', models.CharField(db_column='ERROR_TYPE', max_length=50)),
                ('description', models.TextField(db_column='DESCRIPTION')),
            ],
            options={
                'db_table': 'STUDY_ERROR_TYPE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlacklistedStudy',
            fields=[
                ('ext_study_id', models.CharField(db_column='EXT_STUDY_ID', max_length=18, primary_key=True, serialize=False)),
                ('error_type', models.ForeignKey(db_column='ERROR_TYPE_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.studyerrortype')),
                ('analyzer', models.CharField(db_column='ANALYZER', max_length=15)),
                ('pipeline_id', models.IntegerField(blank=True, db_column='PIPELINE_ID', null=True)),
                ('date_blacklisted', models.DateField(db_column='DATE_BLACKLISTED')),
                ('comment', models.TextField(blank=True, db_column='COMMENT', null=True)),
            ],
            options={
                'db_table': 'BLACKLISTED_STUDY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VariableNames',
            fields=[
                ('var_id', models.SmallIntegerField(db_column='VAR_ID', primary_key=True, serialize=False)),
                ('var_name', models.CharField(db_column='VAR_NAME', max_length=50, unique=True)),
                ('definition', models.TextField(blank=True, db_column='DEFINITION', null=True)),
                ('value_syntax', models.CharField(blank=True, db_column='VALUE_SYNTAX', max_length=250, null=True)),
                ('alias', models.CharField(blank=True, db_column='ALIAS', max_length=30, null=True)),
                ('authority', models.CharField(blank=True, db_column='AUTHORITY', max_length=30, null=True)),
                ('sra_xml_attribute', models.CharField(blank=True, db_column='SRA_XML_ATTRIBUTE', max_length=30, null=True)),
                ('required_for_mimarks_complianc', models.CharField(blank=True, db_column='REQUIRED_FOR_MIMARKS_COMPLIANC', max_length=1, null=True)),
                ('required_for_mims_compliance', models.CharField(blank=True, db_column='REQUIRED_FOR_MIMS_COMPLIANCE', max_length=1, null=True)),
                ('gsc_env_packages', models.CharField(blank=True, db_column='GSC_ENV_PACKAGES', max_length=250, null=True)),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=250, null=True)),
            ],
            options={
                'db_table': 'VARIABLE_NAMES',
            },
        ),
        migrations.CreateModel(
            name='GscCvCv',
            fields=[
                ('var_val_cv', models.CharField(db_column='VAR_VAL_CV', max_length=60, primary_key=True, serialize=False)),
                ('var_name', models.ForeignKey(blank=True, db_column='VAR_NAME', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.variablenames')),
            ],
            options={
                'db_table': 'GSC_CV_CV',
            },
        ),
        migrations.CreateModel(
            name='SampleAnn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', serialize=False, to='emgapi.sample')),
                ('var_val_cv', models.ForeignKey(blank=True, db_column='VAR_VAL_CV', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.gsccvcv')),
                ('units', models.CharField(blank=True, db_column='UNITS', max_length=25, null=True)),
                ('var', models.ForeignKey(db_column='VAR_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.variablenames')),
                ('var_val_ucv', models.CharField(blank=True, db_column='VAR_VAL_UCV', max_length=4000, null=True)),
            ],
            options={
                'db_table': 'SAMPLE_ANN',
            },
        ),
        migrations.CreateModel(
            name='PipelineReleaseTool',
            fields=[
                ('pipeline', models.ForeignKey(db_column='PIPELINE_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='emgapi.pipeline')),
                ('tool', models.ForeignKey(db_column='TOOL_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.pipelinetool')),
                ('tool_group_id', models.DecimalField(db_column='TOOL_GROUP_ID', decimal_places=3, max_digits=6)),
                ('how_tool_used_desc', models.TextField(blank=True, db_column='HOW_TOOL_USED_DESC', null=True)),
            ],
            options={
                'db_table': 'PIPELINE_RELEASE_TOOL',
                'unique_together': {('pipeline', 'tool_group_id'), ('pipeline', 'tool')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisJob',
            fields=[
                ('job_id', models.BigAutoField(db_column='JOB_ID', primary_key=True, serialize=False)),
                ('job_operator', models.CharField(db_column='JOB_OPERATOR', max_length=15)),
                ('pipeline', models.ForeignKey(db_column='PIPELINE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.pipeline')),
                ('submit_time', models.DateTimeField(db_column='SUBMIT_TIME')),
                ('complete_time', models.DateTimeField(blank=True, db_column='COMPLETE_TIME', null=True)),
                ('analysis_status', models.ForeignKey(db_column='ANALYSIS_STATUS_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.analysisstatus')),
                ('re_run_count', models.IntegerField(blank=True, db_column='RE_RUN_COUNT', null=True)),
                ('input_file_name', models.CharField(db_column='INPUT_FILE_NAME', max_length=50)),
                ('result_directory', models.CharField(db_column='RESULT_DIRECTORY', max_length=100)),
                ('sample', models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.sample')),
                ('accession', models.CharField(db_column='EXTERNAL_RUN_IDS', max_length=100)),
                ('is_production_run', models.TextField(blank=True, db_column='IS_PRODUCTION_RUN', null=True)),
                ('experiment_type', models.ForeignKey(db_column='EXPERIMENT_TYPE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.experimenttype')),
                ('run_status_id', models.IntegerField(blank=True, db_column='RUN_STATUS_ID', null=True)),
                ('instrument_platform', models.CharField(blank=True, db_column='INSTRUMENT_PLATFORM', max_length=50, null=True)),
                ('instrument_model', models.CharField(blank=True, db_column='INSTRUMENT_MODEL', max_length=50, null=True)),
            ],
            options={
                'db_table': 'ANALYSIS_JOB',
                'ordering': ('accession',),
                'unique_together': {('pipeline', 'accession'), ('job_id', 'accession')},
            },
        ),
        migrations.CreateModel(
            name='SamplePublication',
            fields=[
                ('sample', models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='emgapi.sample')),
                ('pub', models.ForeignKey(db_column='PUB_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.publication')),
            ],
            options={
                'db_table': 'SAMPLE_PUBLICATION',
                'unique_together': {('sample', 'pub')},
            },
        ),
        migrations.CreateModel(
            name='StudyPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study', models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.study')),
                ('pub', models.ForeignKey(db_column='PUB_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.publication')),
            ],
            options={
                'db_table': 'STUDY_PUBLICATION',
                'unique_together': {('study', 'pub')},
            },
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX biome_biome_name_ts_idx ON BIOME_HIERARCHY_TREE (biome_name)',
            reverse_sql='ALTER TABLE BIOME_HIERARCHY_TREE DROP INDEX biome_biome_name_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX study_study_name_ts_idx ON STUDY(study_name)',
            reverse_sql='ALTER TABLE STUDY DROP INDEX study_study_name_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX study_study_abstract_ts_idx ON STUDY (study_abstract)',
            reverse_sql='ALTER TABLE STUDY DROP INDEX study_study_abstract_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX publication_publication_title_ts_idx ON PUBLICATION (pub_title)',
            reverse_sql='ALTER TABLE PUBLICATION DROP INDEX publication_publication_title_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX publication_pub_abstract_ts_idx ON PUBLICATION (pub_abstract)',
            reverse_sql='ALTER TABLE PUBLICATION DROP INDEX publication_pub_abstract_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX pipeline_description_ts_idx ON PIPELINE_RELEASE (description)',
            reverse_sql='ALTER TABLE PIPELINE_RELEASE DROP INDEX pipeline_description_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX pipeline_changes_ts_idx ON PIPELINE_RELEASE (changes)',
            reverse_sql='ALTER TABLE PIPELINE_RELEASE DROP INDEX pipeline_changes_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX sample_sample_name_ts_idx ON SAMPLE (sample_name)',
            reverse_sql='ALTER TABLE SAMPLE DROP INDEX sample_sample_name_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX sample_sample_desc_ts_idx ON SAMPLE (sample_desc)',
            reverse_sql='ALTER TABLE SAMPLE DROP INDEX sample_sample_desc_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX sample_ann_var_val_ucv_ts_idx ON SAMPLE_ANN (var_val_ucv)',
            reverse_sql='ALTER TABLE SAMPLE_ANN DROP INDEX sample_ann_var_val_ucv_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX run_instrument_platform_ts_idx ON ANALYSIS_JOB (instrument_platform)',
            reverse_sql='ALTER TABLE ANALYSIS_JOB DROP INDEX run_instrument_platform_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX run_instrument_model_ts_idx ON ANALYSIS_JOB (instrument_model)',
            reverse_sql='ALTER TABLE ANALYSIS_JOB DROP INDEX run_instrument_model_ts_idx',
        ),
        migrations.AlterUniqueTogether(
            name='gsccvcv',
            unique_together={('var_name', 'var_val_cv')},
        ),
        migrations.AlterUniqueTogether(
            name='sampleann',
            unique_together={('sample', 'var')},
        ),
        migrations.AlterUniqueTogether(
            name='variablenames',
            unique_together={('var_id', 'var_name')},
        ),
        migrations.RenameField(
            model_name='publication',
            old_name='url',
            new_name='pub_url',
        ),
        migrations.AlterModelOptions(
            name='pipelinetool',
            options={'ordering': ('tool_name',)},
        ),
        migrations.CreateModel(
            name='AnalysisMetadataVariableNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('var_name', models.CharField(db_column='VAR_NAME', max_length=100, unique=True)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=255, null=True)),
            ],
            options={
                'db_table': 'SUMMARY_VARIABLE_NAMES',
                'unique_together': {('var_name', 'description')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisJobAnn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.CharField(blank=True, db_column='UNITS', max_length=25, null=True)),
                ('var', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='emgapi.analysismetadatavariablenames')),
                ('var_val_ucv', models.CharField(blank=True, db_column='VAR_VAL_UCV', max_length=4000, null=True)),
                ('job', models.ForeignKey(db_column='JOB_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis_metadata', to='emgapi.analysisjob')),
            ],
            options={
                'db_table': 'ANALYSIS_JOB_ANN',
                'unique_together': {('job', 'var')},
            },
        ),
        migrations.AlterField(
            model_name='sample',
            name='accession',
            field=models.CharField(db_column='EXT_SAMPLE_ID', max_length=20, unique=True),
        ),
        migrations.AddField(
            model_name='sample',
            name='primary_accession',
            field=models.CharField(db_column='PRIMARY_ACCESSION', max_length=20),
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='secondary_accession',
            field=models.CharField(db_column='SECONDARY_ACCESSION', max_length=100),
        ),
        # migrations.RunSQL(
        #     sql='UPDATE ANALYSIS_JOB as AJ SET AJ.SECONDARY_ACCESSION=AJ.EXTERNAL_RUN_IDS ',
        # ),
        migrations.AlterField(
            model_name='analysisjob',
            name='sample',
            field=models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.sample'),
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='study',
            field=models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.study'),
        ),
        # migrations.RunSQL(
        #     sql='UPDATE ANALYSIS_JOB as AJ JOIN SAMPLE as SM ON (AJ.SAMPLE_ID=SM.SAMPLE_ID) SET AJ.STUDY_ID=SM.STUDY_ID ',
        # ),
        migrations.CreateModel(
            name='StudySample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study', models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.study')),
                ('sample', models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.sample')),
            ],
            options={
                'db_table': 'STUDY_SAMPLE',
                'unique_together': {('study', 'sample')},
            },
        ),
        # migrations.RunSQL(
        #     sql='INSERT INTO STUDY_SAMPLE (STUDY_ID, SAMPLE_ID) SELECT STUDY_ID, SAMPLE_ID from SAMPLE where SAMPLE_ID>0',
        # ),
        migrations.RemoveField(
            model_name='sample',
            name='study',
        ),
        migrations.AddField(
            model_name='pipeline',
            name='tools',
            field=models.ManyToManyField(related_name='pipelines', through='emgapi.PipelineReleaseTool', to='emgapi.PipelineTool'),
        ),
        migrations.AddField(
            model_name='study',
            name='publications',
            field=models.ManyToManyField(related_name='studies', through='emgapi.StudyPublication', to='emgapi.Publication'),
        ),
        migrations.AddField(
            model_name='study',
            name='samples',
            field=models.ManyToManyField(blank=True, related_name='studies', through='emgapi.StudySample', to='emgapi.Sample'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='sample',
            field=models.ForeignKey(blank=True, db_column='SAMPLE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.sample'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='study',
            field=models.ForeignKey(blank=True, db_column='STUDY_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.study'),
        ),
        migrations.AlterField(
            model_name='pipeline',
            name='pipeline_id',
            field=models.SmallIntegerField(db_column='PIPELINE_ID', primary_key=True, serialize=False),
        ),
        migrations.CreateModel(
            name='DownloadDescriptionLabel',
            fields=[
                ('description_id', models.AutoField(db_column='DESCRIPTION_ID', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=255)),
                ('description_label', models.CharField(db_column='DESCRIPTION_LABEL', max_length=100)),
            ],
            options={
                'db_table': 'DOWNLOAD_DESCRIPTION_LABEL',
            },
        ),
        migrations.CreateModel(
            name='DownloadGroupType',
            fields=[
                ('group_id', models.AutoField(db_column='GROUP_ID', primary_key=True, serialize=False)),
                ('group_type', models.CharField(db_column='GROUP_TYPE', max_length=30)),
            ],
            options={
                'db_table': 'DOWNLOAD_GROUP_TYPE',
            },
        ),
        migrations.CreateModel(
            name='DownloadSubdir',
            fields=[
                ('subdir_id', models.AutoField(db_column='SUBDIR_ID', primary_key=True, serialize=False)),
                ('subdir', models.CharField(db_column='SUBDIR', max_length=100)),
            ],
            options={
                'db_table': 'DOWNLOAD_SUBDIR',
            },
        ),
        migrations.CreateModel(
            name='FileFormat',
            fields=[
                ('format_id', models.AutoField(db_column='FORMAT_ID', primary_key=True, serialize=False)),
                ('format_name', models.CharField(db_column='FORMAT_NAME', max_length=30)),
                ('format_extension', models.CharField(db_column='FORMAT_EXTENSION', max_length=30)),
                ('compression', models.BooleanField(db_column='COMPRESSION', default=False)),
            ],
            options={
                'db_table': 'FILE_FORMAT',
            },
        ),
        migrations.CreateModel(
            name='StudyDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('description', models.ForeignKey(blank=True, db_column='DESCRIPTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloaddescriptionlabel')),
                ('file_format', models.ForeignKey(blank=True, db_column='FORMAT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.fileformat')),
                ('group_type', models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadgrouptype')),
                ('parent_id', models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='emgapi.studydownload')),
                ('pipeline', models.ForeignKey(blank=True, db_column='PIPELINE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.pipeline')),
                ('study', models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, related_name='study_download', to='emgapi.study')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadsubdir')),
            ],
            options={
                'db_table': 'STUDY_DOWNLOAD',
                'ordering': ('pipeline', 'group_type', 'alias', 'pipeline'),
                'unique_together': {('realname', 'alias', 'pipeline')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisJobDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('description', models.ForeignKey(blank=True, db_column='DESCRIPTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloaddescriptionlabel')),
                ('file_format', models.ForeignKey(blank=True, db_column='FORMAT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.fileformat')),
                ('group_type', models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadgrouptype')),
                ('job', models.ForeignKey(db_column='JOB_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analysis_download', to='emgapi.analysisjob')),
                ('parent_id', models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='emgapi.analysisjobdownload')),
                ('pipeline', models.ForeignKey(blank=True, db_column='PIPELINE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.pipeline')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadsubdir')),
            ],
            options={
                'db_table': 'ANALYSIS_JOB_DOWNLOAD',
                'ordering': ('pipeline', 'group_type', 'alias', 'pipeline'),
                'unique_together': {('realname', 'alias', 'pipeline')},
            },
        ),
        migrations.RunPython(
            code=create_group_types,
        ),
        migrations.RunPython(
            code=create_fileformats,
        ),
        migrations.RunPython(
            code=create_subdirs,
        ),
        migrations.RunPython(
            code=create_download_description,
        ),
        migrations.AlterField(
            model_name='experimenttype',
            name='experiment_type_id',
            field=models.SmallIntegerField(db_column='EXPERIMENT_TYPE_ID', primary_key=True, serialize=False),
        ),
        migrations.RenameField(
            model_name='analysisjob',
            old_name='accession',
            new_name='external_run_ids',
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='external_run_ids',
            field=models.CharField(blank=True, db_column='EXTERNAL_RUN_IDS', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='secondary_accession',
            field=models.CharField(blank=True, db_column='SECONDARY_ACCESSION', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='job_operator',
            field=models.CharField(blank=True, db_column='JOB_OPERATOR', max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='pipeline',
            field=models.ForeignKey(blank=True, db_column='PIPELINE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.pipeline'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='submit_time',
            field=models.DateTimeField(blank=True, db_column='SUBMIT_TIME', null=True),
        ),
        migrations.AlterModelOptions(
            name='analysisjob',
            options={'ordering': ('job_id',)},
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('status_id', models.SmallIntegerField(db_column='STATUS_ID', primary_key=True, serialize=False)),
                ('status', models.CharField(db_column='STATUS', max_length=25)),
            ],
            options={
                'db_table': 'STATUS',
                'ordering': ('status_id',),
            },
        ),
        migrations.RunPython(
            code=populate_status,
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('run_id', models.BigAutoField(db_column='RUN_ID', primary_key=True, serialize=False)),
                ('accession', models.CharField(blank=True, db_column='ACCESSION', max_length=80, null=True)),
                ('secondary_accession', models.CharField(blank=True, db_column='SECONDARY_ACCESSION', max_length=100, null=True)),
                ('instrument_platform', models.CharField(blank=True, db_column='INSTRUMENT_PLATFORM', max_length=100, null=True)),
                ('instrument_model', models.CharField(blank=True, db_column='INSTRUMENT_MODEL', max_length=100, null=True)),
                ('status_id', models.ForeignKey(db_column='STATUS_ID', default=2, on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='emgapi.status')),
                ('sample', models.ForeignKey(blank=True, db_column='SAMPLE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='emgapi.sample')),
                ('study', models.ForeignKey(blank=True, db_column='STUDY_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='emgapi.study')),
                ('experiment_type', models.ForeignKey(blank=True, db_column='EXPERIMENT_TYPE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='emgapi.experimenttype')),
            ],
            options={
                'db_table': 'RUN',
                'unique_together': {('accession', 'secondary_accession'), ('run_id', 'accession')},
                'ordering': ('accession',),
            },
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='run',
            field=models.ForeignKey(blank=True, db_column='RUN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='emgapi.run'),
        ),
        migrations.AlterModelOptions(
            name='analysisjobdownload',
            options={'ordering': ('pipeline', 'group_type', 'alias')},
        ),
        migrations.AlterModelOptions(
            name='studydownload',
            options={'ordering': ('pipeline', 'group_type', 'alias')},
        ),
        # migrations.RunSQL(
        #     sql="INSERT INTO RUN (ACCESSION, SECONDARY_ACCESSION,\n                STATUS_ID, SAMPLE_ID, STUDY_ID, EXPERIMENT_TYPE_ID,\n                INSTRUMENT_PLATFORM, INSTRUMENT_MODEL)\n                SELECT distinct EXTERNAL_RUN_IDS, SECONDARY_ACCESSION,\n                    RUN_STATUS_ID, SAMPLE_ID, STUDY_ID, EXPERIMENT_TYPE_ID,\n                    group_concat(\n                        INSTRUMENT_PLATFORM\n                        ORDER BY INSTRUMENT_PLATFORM\n                        SEPARATOR ','\n                    ) as INSTRUMENT_PLATFORM,\n                    group_concat(\n                        INSTRUMENT_MODEL\n                        ORDER BY INSTRUMENT_MODEL\n                        SEPARATOR ','\n                    ) as INSTRUMENT_MODEL\n                    FROM ANALYSIS_JOB\n                    GROUP BY EXTERNAL_RUN_IDS\n            ",
        # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0007_split_run.populate_runs,
        # # ),
        migrations.AlterModelOptions(
            name='study',
            options={'ordering': ('study_id',)},
        ),
        migrations.RenameField(
            model_name='study',
            old_name='accession',
            new_name='secondary_accession',
        ),
        migrations.AlterUniqueTogether(
            name='study',
            unique_together={('study_id', 'secondary_accession')},
        ),
        migrations.RemoveField(
            model_name='sampleann',
            name='var_val_cv',
        ),
        migrations.DeleteModel(
            name='GscCvCv',
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('assembly_id', models.BigAutoField(db_column='ASSEMBLY_ID', primary_key=True, serialize=False)),
                ('accession', models.CharField(blank=True, db_column='ACCESSION', max_length=80, null=True)),
                ('wgs_accession', models.CharField(blank=True, db_column='WGS_ACCESSION', max_length=100, null=True)),
                ('legacy_accession', models.CharField(blank=True, db_column='LEGACY_ACCESSION', max_length=100, null=True)),
                ('experiment_type', models.ForeignKey(blank=True, db_column='EXPERIMENT_TYPE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assemblies', to='emgapi.experimenttype')),
            ],
            options={
                'db_table': 'ASSEMBLY',
                'ordering': ('accession',),
            },
        ),
        migrations.CreateModel(
            name='AssemblyRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly', models.ForeignKey(db_column='ASSEMBLY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.assembly')),
                ('run', models.ForeignKey(db_column='RUN_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.run')),
            ],
            options={
                'db_table': 'ASSEMBLY_RUN',
                'unique_together': {('assembly', 'run')},
            },
        ),
        migrations.CreateModel(
            name='AssemblySample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly', models.ForeignKey(db_column='ASSEMBLY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.assembly')),
                ('sample', models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.sample')),
            ],
            options={
                'db_table': 'ASSEMBLY_SAMPLE',
                'unique_together': {('assembly', 'sample')},
            },
        ),
        migrations.AddField(
            model_name='assembly',
            name='runs',
            field=models.ManyToManyField(blank=True, related_name='assemblies', through='emgapi.AssemblyRun', to='emgapi.Run'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='samples',
            field=models.ManyToManyField(blank=True, related_name='assemblies', through='emgapi.AssemblySample', to='emgapi.Sample'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='status_id',
            field=models.ForeignKey(db_column='STATUS_ID', default=2, on_delete=django.db.models.deletion.CASCADE, related_name='assemblies', to='emgapi.status'),
        ),
        migrations.AlterUniqueTogether(
            name='assembly',
            unique_together={('accession', 'wgs_accession', 'legacy_accession'), ('assembly_id', 'accession')},
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='assembly',
            field=models.ForeignKey(blank=True, db_column='ASSEMBLY_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='emgapi.assembly'),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0010_run_assembly_split.populate_assemblies,
        # # ),
        migrations.AlterField(
            model_name='study',
            name='is_public',
            field=models.BooleanField(db_column='IS_PUBLIC', default=False),
        ),
        migrations.CreateModel(
            name='SampleGeoCoordinate',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('emgapi.sample',),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='experiment_type',
            field=models.ForeignKey(db_column='EXPERIMENT_TYPE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='emgapi.experimenttype'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='pipeline',
            field=models.ForeignKey(blank=True, db_column='PIPELINE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='emgapi.pipeline'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='run',
            field=models.ForeignKey(blank=True, db_column='RUN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='emgapi.run'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='sample',
            field=models.ForeignKey(blank=True, db_column='SAMPLE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='emgapi.sample'),
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='study',
            field=models.ForeignKey(blank=True, db_column='STUDY_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='emgapi.study'),
        ),
        migrations.AlterField(
            model_name='biome',
            name='biome_name',
            field=models.CharField(db_column='BIOME_NAME', help_text='Biome name', max_length=60),
        ),
        migrations.AlterField(
            model_name='biome',
            name='lineage',
            field=models.CharField(db_column='LINEAGE', help_text='Biome lineage', max_length=500),
        ),
        migrations.AlterField(
            model_name='experimenttype',
            name='experiment_type',
            field=models.CharField(db_column='EXPERIMENT_TYPE', help_text='Experiment type, e.g. metagenomic', max_length=30),
        ),
        migrations.AlterField(
            model_name='fileformat',
            name='compression',
            field=models.BooleanField(db_column='COMPRESSION', default=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='authors',
            field=models.CharField(blank=True, db_column='AUTHORS', help_text='Publication authors', max_length=4000, null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='doi',
            field=models.CharField(blank=True, db_column='DOI', help_text='DOI', max_length=1500, null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='isbn',
            field=models.CharField(blank=True, db_column='ISBN', help_text='ISBN', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='iso_journal',
            field=models.CharField(blank=True, db_column='ISO_JOURNAL', help_text='ISO journal', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='issue',
            field=models.CharField(blank=True, db_column='ISSUE', help_text='Publication issue', max_length=55, null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='pub_abstract',
            field=models.TextField(blank=True, db_column='PUB_ABSTRACT', help_text='Publication abstract', null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='pub_title',
            field=models.CharField(db_column='PUB_TITLE', help_text='Publication title', max_length=740),
        ),
        migrations.AlterField(
            model_name='publication',
            name='pub_url',
            field=models.CharField(blank=True, db_column='URL', help_text='Publication url', max_length=740, null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='published_year',
            field=models.SmallIntegerField(blank=True, db_column='PUBLISHED_YEAR', help_text='Published year', null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='pubmed_central_id',
            field=models.IntegerField(blank=True, db_column='PUBMED_CENTRAL_ID', help_text='Pubmed Central Identifier', null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='pubmed_id',
            field=models.IntegerField(blank=True, db_column='PUBMED_ID', help_text='Pubmed ID', null=True),
        ),
        migrations.AlterField(
            model_name='publication',
            name='volume',
            field=models.CharField(blank=True, db_column='VOLUME', help_text='Publication volume', max_length=55, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='accession',
            field=models.CharField(db_column='EXT_SAMPLE_ID', help_text='Secondary accession', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='collection_date',
            field=models.DateField(blank=True, db_column='COLLECTION_DATE', help_text='Collection date', null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='environment_biome',
            field=models.CharField(blank=True, db_column='ENVIRONMENT_BIOME', help_text='Environment biome', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='environment_feature',
            field=models.CharField(blank=True, db_column='ENVIRONMENT_FEATURE', help_text='Environment feature', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='environment_material',
            field=models.CharField(blank=True, db_column='ENVIRONMENT_MATERIAL', help_text='Environment material', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='geo_loc_name',
            field=models.CharField(blank=True, db_column='GEO_LOC_NAME', help_text='Name of geographical location', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='host_tax_id',
            field=models.IntegerField(blank=True, db_column='HOST_TAX_ID', help_text='Sample host tax id', null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='latitude',
            field=models.DecimalField(blank=True, db_column='LATITUDE', decimal_places=4, help_text='Latitude', max_digits=7, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='longitude',
            field=models.DecimalField(blank=True, db_column='LONGITUDE', decimal_places=4, help_text='Longitude', max_digits=7, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='primary_accession',
            field=models.CharField(db_column='PRIMARY_ACCESSION', help_text='Primary accession', max_length=20),
        ),
        migrations.AlterField(
            model_name='sample',
            name='sample_alias',
            field=models.CharField(blank=True, db_column='SAMPLE_ALIAS', help_text='Sample alias', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='sample_desc',
            field=models.TextField(blank=True, db_column='SAMPLE_DESC', help_text='Sample description', null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='sample_name',
            field=models.CharField(blank=True, db_column='SAMPLE_NAME', help_text='Sample name', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='species',
            field=models.CharField(blank=True, db_column='SPECIES', help_text='Species', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sampleann',
            name='sample',
            field=models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='emgapi.sample'),
        ),
        # migrations.RunPython(
        #     code=rm_sample_ann_optional_keys,
        # ),
        migrations.AlterUniqueTogether(
            name='sampleann',
            unique_together=set(),
        ),
        # migrations.AddField(
        #     model_name='sampleann',
        #     name='id',
        #     field=models.IntegerField(null=True),
        # ),
        # migrations.RunSQL(
        #     sql='SET @a:=0;UPDATE SAMPLE_ANN SET id=@a:=@a+1;',
        # ),
        # migrations.AlterField(
        #     model_name='sampleann',
        #     name='id',
        #     field=models.IntegerField(primary_key=True, serialize=False),
        # ),
        # migrations.AlterField(
        #     model_name='sampleann',
        #     name='id',
        #     field=models.AutoField(primary_key=True, serialize=False),
        # ),
        migrations.AlterUniqueTogether(
            name='sampleann',
            unique_together={('sample', 'var')},
        ),
        migrations.AlterField(
            model_name='studypublication',
            name='study',
            field=models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.study'),
        ),
        # migrations.RunPython(
        #     code=rm_study_pub_optional_keys,
        # ),
        migrations.AlterUniqueTogether(
            name='studypublication',
            unique_together=set(),
        ),
        # migrations.AddField(
        #     model_name='studypublication',
        #     name='id',
        #     field=models.IntegerField(null=True),
        # ),
        # migrations.RunSQL(
        #     sql='SET @a:=0;UPDATE STUDY_PUBLICATION SET id=@a:=@a+1;',
        # ),
        # migrations.AlterField(
        #     model_name='studypublication',
        #     name='id',
        #     field=models.IntegerField(primary_key=True, serialize=False),
        # ),
        # migrations.AlterField(
        #     model_name='studypublication',
        #     name='id',
        #     field=models.AutoField(primary_key=True, serialize=False),
        # ),
        migrations.AlterUniqueTogether(
            name='studypublication',
            unique_together={('study', 'pub')},
        ),
        migrations.CreateModel(
            name='CogCat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=80, unique=True)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=80)),
            ],
            options={
                'db_table': 'COG',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('genome_id', models.AutoField(db_column='GENOME_ID', primary_key=True, serialize=False)),
                ('accession', models.CharField(db_column='GENOME_ACCESSION', max_length=40, unique=True)),
                ('ena_genome_accession', models.CharField(db_column='ENA_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('ena_sample_accession', models.CharField(db_column='ENA_SAMPLE_ACCESSION', max_length=20, null=True)),
                ('ena_study_accession', models.CharField(db_column='ENA_STUDY_ACCESSION', max_length=20, null=True)),
                ('ncbi_genome_accession', models.CharField(db_column='NCBI_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('ncbi_sample_accession', models.CharField(db_column='NCBI_SAMPLE_ACCESSION', max_length=20, null=True)),
                ('ncbi_study_accession', models.CharField(db_column='NCBI_STUDY_ACCESSION', max_length=20, null=True)),
                ('img_genome_accession', models.CharField(db_column='IMG_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('patric_genome_accession', models.CharField(db_column='PATRIC_GENOME_ACCESSION', max_length=20, null=True, unique=True)),
                ('length', models.IntegerField(db_column='LENGTH')),
                ('num_contigs', models.IntegerField(db_column='N_CONTIGS')),
                ('n_50', models.IntegerField(db_column='N50')),
                ('gc_content', models.FloatField(db_column='GC_CONTENT')),
                ('type', models.CharField(choices=[('mag', 'MAG'), ('isolate', 'Isolate')], db_column='TYPE', max_length=80)),
                ('completeness', models.FloatField(db_column='COMPLETENESS')),
                ('contamination', models.FloatField(db_column='CONTAMINATION')),
                ('rna_5s', models.FloatField(db_column='RNA_5S')),
                ('rna_16s', models.FloatField(db_column='RNA_16S')),
                ('rna_23s', models.FloatField(db_column='RNA_23S')),
                ('trnas', models.FloatField(db_column='T_RNA')),
                ('nc_rnas', models.IntegerField(db_column='NC_RNA')),
                ('num_proteins', models.IntegerField(db_column='NUM_PROTEINS')),
                ('eggnog_coverage', models.FloatField(db_column='EGGNOG_COVERAGE')),
                ('ipr_coverage', models.FloatField(db_column='IPR_COVERAGE')),
                ('taxon_lineage', models.CharField(db_column='TAXON_LINEAGE', max_length=400)),
                ('num_genomes_total', models.IntegerField(db_column='PANGENOME_TOTAL_GENOMES', null=True)),
                ('num_genomes_non_redundant', models.IntegerField(db_column='PANGENOME_NON_RED_GENOMES', null=True)),
                ('pangenome_size', models.IntegerField(db_column='PANGENOME_SIZE', null=True)),
                ('pangenome_core_size', models.IntegerField(db_column='PANGENOME_CORE_PROP', null=True)),
                ('pangenome_accessory_size', models.IntegerField(db_column='PANGENOME_ACCESSORY_PROP', null=True)),
                ('pangenome_eggnog_coverage', models.FloatField(db_column='PANGENOME_EGGNOG_COV', null=True)),
                ('pangenome_ipr_coverage', models.FloatField(db_column='PANGENOME_IPR_COV', null=True)),
                ('last_update', models.DateTimeField(auto_now=True, db_column='LAST_UPDATE')),
                ('first_created', models.DateTimeField(auto_now_add=True, db_column='FIRST_CREATED')),
                ('result_directory', models.CharField(blank=True, db_column='RESULT_DIRECTORY', max_length=100, null=True)),
                ('biome', models.ForeignKey(db_column='BIOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.biome')),
            ],
            options={
                'db_table': 'GENOME',
            },
        ),
        migrations.CreateModel(
            name='GenomeCogCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('pangenome_count', models.IntegerField(db_column='PANGENOME_COUNT')),
                ('cog', models.ForeignKey(db_column='COG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.cogcat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
            ],
            options={
                'db_table': 'GENOME_COG_COUNTS',
                'unique_together': {('genome', 'cog')},
            },
        ),
        migrations.CreateModel(
            name='GenomeSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=40, unique=True)),
            ],
            options={
                'db_table': 'GENOME_SET',
            },
        ),
        migrations.CreateModel(
            name='GeographicLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='CONTINENT', max_length=80, unique=True)),
            ],
            options={
                'db_table': 'GEOGRAPHIC_RANGE',
            },
        ),
        migrations.CreateModel(
            name='KeggClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_id', models.CharField(db_column='CLASS_ID', max_length=10, unique=True)),
                ('name', models.CharField(db_column='NAME', max_length=80)),
                ('parent', models.ForeignKey(db_column='PARENT', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.keggclass')),
            ],
            options={
                'db_table': 'KEGG_CLASS',
            },
        ),
        migrations.CreateModel(
            name='KeggModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='MODULE_NAME', max_length=10, unique=True)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=200)),
            ],
            options={
                'db_table': 'KEGG_MODULE',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(db_column='VERSION', max_length=20)),
                ('last_update', models.DateTimeField(auto_now=True, db_column='LAST_UPDATE')),
                ('first_created', models.DateTimeField(auto_now_add=True, db_column='FIRST_CREATED')),
                ('result_directory', models.CharField(db_column='RESULT_DIRECTORY', max_length=100)),
            ],
            options={
                'db_table': 'RELEASE',
            },
        ),
        migrations.CreateModel(
            name='ReleaseGenomes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
                ('release', models.ForeignKey(db_column='RELEASE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.release')),
            ],
            options={
                'db_table': 'RELEASE_GENOMES',
                'unique_together': {('genome', 'release')},
            },
        ),
        migrations.AddField(
            model_name='release',
            name='genomes',
            field=models.ManyToManyField(through='emgapi.ReleaseGenomes', to='emgapi.Genome'),
        ),
        migrations.CreateModel(
            name='GenomeKeggModuleCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('pangenome_count', models.IntegerField(db_column='PANGENOME_COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
                ('kegg_module', models.ForeignKey(db_column='KEGG_MODULE', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.keggmodule')),
            ],
            options={
                'db_table': 'GENOME_KEGG_MODULE_COUNTS',
                'unique_together': {('genome', 'kegg_module')},
            },
        ),
        migrations.CreateModel(
            name='GenomeKeggClassCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('pangenome_count', models.IntegerField(db_column='PANGENOME_COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
                ('kegg_class', models.ForeignKey(db_column='KEGG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.keggclass')),
            ],
            options={
                'db_table': 'GENOME_KEGG_CLASS_COUNTS',
                'unique_together': {('genome', 'kegg_class')},
            },
        ),
        migrations.CreateModel(
            name='GenomeGeographicLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GeographicLocation', models.ForeignKey(db_column='COG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.geographiclocation')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
            ],
            options={
                'db_table': 'GENOME_GEOGRAPHIC_RANGE',
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='cog_matches',
            field=models.ManyToManyField(through='emgapi.GenomeCogCounts', to='emgapi.CogCat'),
        ),
        migrations.AddField(
            model_name='genome',
            name='genome_set',
            field=models.ForeignKey(db_column='GENOME_SET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.genomeset'),
        ),
        migrations.AddField(
            model_name='genome',
            name='geo_origin',
            field=models.ForeignKey(db_column='GEOGRAPHIC_ORIGIN', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.geographiclocation'),
        ),
        migrations.AddField(
            model_name='genome',
            name='kegg_classes',
            field=models.ManyToManyField(through='emgapi.GenomeKeggClassCounts', to='emgapi.KeggClass'),
        ),
        migrations.AddField(
            model_name='genome',
            name='kegg_modules',
            field=models.ManyToManyField(through='emgapi.GenomeKeggModuleCounts', to='emgapi.KeggModule'),
        ),
        migrations.AddField(
            model_name='genome',
            name='pangenome_geographic_range',
            field=models.ManyToManyField(db_table='GENOME_PANGENOME_GEOGRAPHIC_RANGE', related_name='geographic_range', to='emgapi.GeographicLocation'),
        ),
        migrations.AddField(
            model_name='genome',
            name='releases',
            field=models.ManyToManyField(through='emgapi.ReleaseGenomes', to='emgapi.Release'),
        ),
        migrations.CreateModel(
            name='ReleaseDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('description', models.ForeignKey(blank=True, db_column='DESCRIPTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloaddescriptionlabel')),
                ('file_format', models.ForeignKey(blank=True, db_column='FORMAT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.fileformat')),
                ('group_type', models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadgrouptype')),
                ('parent_id', models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='emgapi.releasedownload')),
                ('release', models.ForeignKey(db_column='RELEASE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.release')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadsubdir')),
            ],
            options={
                'db_table': 'RELEASE_DOWNLOAD',
                'ordering': ('group_type', 'alias'),
                'unique_together': {('realname', 'alias')},
            },
        ),
        migrations.CreateModel(
            name='GenomeDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('description', models.ForeignKey(blank=True, db_column='DESCRIPTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloaddescriptionlabel')),
                ('file_format', models.ForeignKey(blank=True, db_column='FORMAT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.fileformat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
                ('group_type', models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadgrouptype')),
                ('parent_id', models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='emgapi.genomedownload')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.downloadsubdir')),
            ],
            options={
                'db_table': 'GENOME_DOWNLOAD',
                'ordering': ('group_type', 'alias'),
                'unique_together': {('realname', 'alias', 'genome')},
            },
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0015_genomes.add_group_types,
        # #     reverse_code=emgapi.migrations.0015_genomes.remove_group_types,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0015_genomes.add_fileformats,
        # #     reverse_code=emgapi.migrations.0015_genomes.remove_file_formats,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0015_genomes.add_download_description,
        # #     reverse_code=emgapi.migrations.0015_genomes.remove_download_description,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0015_genomes.add_subdirs,
        # #     reverse_code=emgapi.migrations.0015_genomes.remove_subdirs,
        # # ),
        migrations.CreateModel(
            name='SuperStudy',
            fields=[
                ('super_study_id', models.AutoField(db_column='STUDY_ID', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='TITLE', max_length=100)),
                ('description', models.TextField(blank=True, db_column='DESCRIPTION', null=True)),
                ('image', models.CharField(blank=True, db_column='IMAGE', max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'super studies',
                'db_table': 'SUPER_STUDY',
            },
        ),
        migrations.CreateModel(
            name='SuperStudyBiome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biome', models.ForeignKey(db_column='BIOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.biome')),
                ('super_study', models.ForeignKey(db_column='SUPER_STUDY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.superstudy')),
            ],
            options={
                'verbose_name_plural': 'super studies biomes',
                'db_table': 'SUPER_STUDY_BIOME',
                'unique_together': {('biome', 'super_study')},
            },
        ),
        migrations.AlterModelOptions(
            name='study',
            options={'ordering': ('study_id',), 'verbose_name_plural': 'studies'},
        ),
        migrations.CreateModel(
            name='SuperStudyStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study', models.ForeignKey(db_column='STUDY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.study')),
                ('super_study', models.ForeignKey(db_column='SUPER_STUDY_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.superstudy')),
            ],
            options={
                'verbose_name_plural': 'super studies studies',
                'db_table': 'SUPER_STUDY_STUDY',
                'unique_together': {('study', 'super_study')},
            },
        ),
        migrations.AddField(
            model_name='superstudy',
            name='biomes',
            field=models.ManyToManyField(blank=True, related_name='super_studies', through='emgapi.SuperStudyBiome', to='emgapi.Biome'),
        ),
        migrations.AddField(
            model_name='superstudy',
            name='flagship_studies',
            field=models.ManyToManyField(blank=True, related_name='super_studies', through='emgapi.SuperStudyStudy', to='emgapi.Study'),
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX super_study_title_ts_idx ON SUPER_STUDY(title)',
            reverse_sql='ALTER TABLE SUPER_STUDY DROP INDEX super_study_title_ts_idx',
        ),
        RunSqlIfMySQL(
            sql='CREATE FULLTEXT INDEX super_study_description_ts_idx ON SUPER_STUDY(description)',
            reverse_sql='ALTER TABLE SUPER_STUDY DROP INDEX super_study_description_ts_idx',
        ),
        migrations.RunPython(
            code=create_pipeline_v5,
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0017_auto_20190918_1239.create_group_types,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0017_auto_20190918_1239.create_subdirs,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0017_auto_20190918_1239.create_download_description,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0017_auto_20190918_1239.create_fileformats,
        # # ),
        migrations.RunPython(
            code=add_antismash_clusters,
            reverse_code=remove_antismash_clusters,
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0019_auto_20200110_1455.create_download_description,
        # # ),
        migrations.RunPython(
            code=create_summary_var_names,
        ),
        migrations.CreateModel(
            name='AntiSmashGC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=80)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=80)),
            ],
            options={
                'db_table': 'ANTISMASH_GENECLUSTER',
            },
        ),
        migrations.CreateModel(
            name='GenomeAntiSmashGCCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome_count', models.IntegerField(db_column='GENOME_COUNT')),
                ('antismash_genecluster', models.ForeignKey(db_column='ANTISMASH_GENECLUSTER', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.antismashgc')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genome')),
            ],
            options={
                'db_table': 'GENOME_ANTISMASH_GENECLUSTER_COUNTS',
                'unique_together': {('genome', 'antismash_genecluster')},
            },
        ),
        migrations.AddField(
            model_name='genome',
            name='antismash_geneclusters',
            field=models.ManyToManyField(through='emgapi.GenomeAntiSmashGCCounts', to='emgapi.AntiSmashGC'),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0021_auto_20200218_2005.add_download_descriptions,
        # #     reverse_code=emgapi.migrations.0021_auto_20200218_2005.remove_download_descriptions,
        # # ),
        migrations.AddField(
            model_name='genome',
            name='cmseq',
            field=models.FloatField(db_column='CMSEQ', null=True),
        ),
        migrations.AddField(
            model_name='genome',
            name='taxincons',
            field=models.FloatField(db_column='TAXINCONS', default=0.0),
            preserve_default=False,
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0023_auto_20200415_1055.create_file_formats,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0023_auto_20200415_1055.create_subdirs,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0023_auto_20200415_1055.create_download_description,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0023_auto_20200415_1055.change_description_labels,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0024_auto_20200505_1737.create_summary_variable_names,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0025_auto_20200605_1838.create_download_description,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0025_auto_20200605_1838.create_group_types,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0026_auto_20200612_1102.create_download_description,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0026_auto_20200612_1102.rename_eggnog_description_labels,
        # # ),
        migrations.CreateModel(
            name='ChecksumAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=255, unique=True)),
            ],
            options={
                'db_table': 'CHECKSUM_ALGORITHM',
            },
        ),
        migrations.AlterModelOptions(
            name='analysismetadatavariablenames',
            options={'verbose_name': 'analysis meta variable name'},
        ),
        migrations.AlterModelOptions(
            name='antismashgc',
            options={'verbose_name_plural': 'antiSMASH clusters'},
        ),
        migrations.AlterModelOptions(
            name='assembly',
            options={'ordering': ('accession',), 'verbose_name_plural': 'assemblies'},
        ),
        migrations.AlterModelOptions(
            name='assemblyrun',
            options={'verbose_name_plural': 'assembly runs'},
        ),
        migrations.AlterModelOptions(
            name='assemblysample',
            options={'verbose_name_plural': 'assembly samples'},
        ),
        migrations.AlterModelOptions(
            name='blacklistedstudy',
            options={'managed': False, 'verbose_name_plural': 'blacklisted studies'},
        ),
        migrations.AlterModelOptions(
            name='cogcat',
            options={'verbose_name_plural': 'COG categories'},
        ),
        migrations.AlterModelOptions(
            name='variablenames',
            options={'verbose_name': 'variable name'},
        ),
        migrations.AddField(
            model_name='analysisjobdownload',
            name='file_checksum',
            field=models.CharField(blank=True, db_column='CHECKSUM', max_length=255),
        ),
        migrations.AddField(
            model_name='genomedownload',
            name='file_checksum',
            field=models.CharField(blank=True, db_column='CHECKSUM', max_length=255),
        ),
        migrations.AddField(
            model_name='releasedownload',
            name='file_checksum',
            field=models.CharField(blank=True, db_column='CHECKSUM', max_length=255),
        ),
        migrations.AddField(
            model_name='studydownload',
            name='file_checksum',
            field=models.CharField(blank=True, db_column='CHECKSUM', max_length=255),
        ),
        migrations.AlterField(
            model_name='genome',
            name='ena_genome_accession',
            field=models.CharField(blank=True, db_column='ENA_GENOME_ACCESSION', max_length=20, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='ena_sample_accession',
            field=models.CharField(blank=True, db_column='ENA_SAMPLE_ACCESSION', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='geo_origin',
            field=models.ForeignKey(blank=True, db_column='GEOGRAPHIC_ORIGIN', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.geographiclocation'),
        ),
        migrations.AlterField(
            model_name='genome',
            name='img_genome_accession',
            field=models.CharField(blank=True, db_column='IMG_GENOME_ACCESSION', max_length=20, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='ncbi_genome_accession',
            field=models.CharField(blank=True, db_column='NCBI_GENOME_ACCESSION', max_length=20, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='ncbi_sample_accession',
            field=models.CharField(blank=True, db_column='NCBI_SAMPLE_ACCESSION', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='ncbi_study_accession',
            field=models.CharField(blank=True, db_column='NCBI_STUDY_ACCESSION', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='num_genomes_non_redundant',
            field=models.IntegerField(blank=True, db_column='PANGENOME_NON_RED_GENOMES', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='num_genomes_total',
            field=models.IntegerField(blank=True, db_column='PANGENOME_TOTAL_GENOMES', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='pangenome_accessory_size',
            field=models.IntegerField(blank=True, db_column='PANGENOME_ACCESSORY_PROP', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='pangenome_core_size',
            field=models.IntegerField(blank=True, db_column='PANGENOME_CORE_PROP', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='pangenome_eggnog_coverage',
            field=models.FloatField(blank=True, db_column='PANGENOME_EGGNOG_COV', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='pangenome_ipr_coverage',
            field=models.FloatField(blank=True, db_column='PANGENOME_IPR_COV', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='pangenome_size',
            field=models.IntegerField(blank=True, db_column='PANGENOME_SIZE', null=True),
        ),
        migrations.AlterField(
            model_name='genome',
            name='patric_genome_accession',
            field=models.CharField(blank=True, db_column='PATRIC_GENOME_ACCESSION', max_length=20, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='analysisjobdownload',
            name='checksum_algorithm',
            field=models.ForeignKey(blank=True, db_column='CHECKSUM_ALGORITHM', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.checksumalgorithm'),
        ),
        migrations.AddField(
            model_name='genomedownload',
            name='checksum_algorithm',
            field=models.ForeignKey(blank=True, db_column='CHECKSUM_ALGORITHM', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.checksumalgorithm'),
        ),
        migrations.AddField(
            model_name='releasedownload',
            name='checksum_algorithm',
            field=models.ForeignKey(blank=True, db_column='CHECKSUM_ALGORITHM', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.checksumalgorithm'),
        ),
        migrations.AddField(
            model_name='studydownload',
            name='checksum_algorithm',
            field=models.ForeignKey(blank=True, db_column='CHECKSUM_ALGORITHM', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.checksumalgorithm'),
        ),
        migrations.RunPython(
            code=add_checksum_algorithms,
            reverse_code=remove_checksum_algorithms,
        ),
        migrations.AlterField(
            model_name='study',
            name='study_name',
            field=models.CharField(blank=True, db_column='STUDY_NAME', max_length=4000, null=True),
        ),
        migrations.AddField(
            model_name='assembly',
            name='coverage',
            field=models.IntegerField(blank=True, db_column='COVERAGE', null=True),
        ),
        migrations.AddField(
            model_name='assembly',
            name='min_gap_length',
            field=models.IntegerField(blank=True, db_column='MIN_GAP_LENGTH', null=True),
        ),
        migrations.AddField(
            model_name='assembly',
            name='study',
            field=models.ForeignKey(blank=True, db_column='STUDY_ID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='emgapi.study'),
        ),
        migrations.AddField(
            model_name='superstudy',
            name='url_slug',
            field=models.SlugField(db_column='URL_SLUG', default=uuid.uuid4, max_length=100),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0031_superstudy_url_slug.add_url_slug_to_super_studies,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        migrations.AlterField(
            model_name='superstudy',
            name='url_slug',
            field=models.SlugField(db_column='URL_SLUG', max_length=100),
        ),
        migrations.RemoveField(
            model_name='superstudy',
            name='image',
        ),
        migrations.AddField(
            model_name='superstudy',
            name='logo',
            field=models.TextField(blank=True, db_column='LOGO', max_length=100000, null=True),
        ),
        migrations.RenameModel(
            old_name='Release',
            new_name='GenomeCatalogue',
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='catalogue_id',
            field=models.SlugField(db_column='CATALOGUE_ID', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='name',
            field=models.CharField(db_column='NAME', max_length=100, null=True, unique=True),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0033_multiple_genome_cats.give_catalogues_an_id,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0033_multiple_genome_cats.add_genomes_prefix_to_genome_cat_results_dir,
        # #     reverse_code=emgapi.migrations.0033_multiple_genome_cats.unadd_genomes_prefix_to_genome_cat_results_dir,
        # # ),
        migrations.AlterField(
            model_name='genomecatalogue',
            name='catalogue_id',
            field=models.SlugField(db_column='CATALOGUE_ID', max_length=100),
        ),
        migrations.AlterField(
            model_name='genomecatalogue',
            name='name',
            field=models.CharField(db_column='NAME', max_length=100, unique=True),
        ),
        migrations.AddField(
            model_name='genome',
            name='catalogue',
            field=models.ForeignKey(db_column='GENOME_CATALOGUE', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.genomecatalogue'),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0033_multiple_genome_cats.make_first_release_for_genome_be_only_genome_catalogue,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        migrations.RemoveField(
            model_name='genome',
            name='releases',
        ),
        migrations.AlterField(
            model_name='genome',
            name='catalogue',
            field=models.ForeignKey(db_column='GENOME_CATALOGUE', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genomecatalogue'),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0033_multiple_genome_cats.change_release_to_catalogue_download_description,
        # #     reverse_code=emgapi.migrations.0033_multiple_genome_cats.unchange_release_to_catalogue_download_description,
        # # ),
        migrations.AlterField(
            model_name='genome',
            name='catalogue',
            field=models.ForeignKey(db_column='GENOME_CATALOGUE', on_delete=django.db.models.deletion.CASCADE, related_name='genomes', to='emgapi.genomecatalogue'),
        ),
        migrations.RenameModel(
            old_name='ReleaseDownload',
            new_name='GenomeCatalogueDownload',
        ),
        migrations.RenameField(
            model_name='GenomeCatalogueDownload',
            old_name='release',
            new_name='genome_catalogue',
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='biome',
            field=models.ForeignKey(blank=True, db_column='BIOME_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.biome'),
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='description',
            field=models.TextField(blank=True, db_column='DESCRIPTION', help_text='Use <a href="https://commonmark.org/help/" target="_newtab">markdown</a> for links and rich text.', null=True),
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='protein_catalogue_description',
            field=models.TextField(blank=True, db_column='PROTEIN_CATALOGUE_DESCRIPTION', help_text='Use <a href="https://commonmark.org/help/" target="_newtab">markdown</a> for links and rich text.', null=True),
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='protein_catalogue_name',
            field=models.CharField(blank=True, db_column='PROTEIN_CATALOGUE_NAME', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='genomecatalogue',
            name='result_directory',
            field=models.CharField(blank=True, db_column='RESULT_DIRECTORY', max_length=100, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='genomecatalogue',
            unique_together={('biome', 'version')},
        ),
        migrations.AlterModelTable(
            name='genomecatalogue',
            table='GENOME_CATALOGUE',
        ),
        migrations.RemoveField(
            model_name='genomecatalogue',
            name='first_created',
        ),
        migrations.RemoveField(
            model_name='genomecatalogue',
            name='genomes',
        ),
        migrations.DeleteModel(
            name='ReleaseGenomes',
        ),
        migrations.AlterUniqueTogether(
            name='genomecataloguedownload',
            unique_together={('realname', 'alias')},
        ),
        migrations.AlterField(
            model_name='genomecataloguedownload',
            name='genome_catalogue',
            field=models.ForeignKey(db_column='GENOME_CATALOGUE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.genomecatalogue'),
        ),
        migrations.AlterModelTable(
            name='genomecataloguedownload',
            table='GENOME_CATALOGUE_DOWNLOAD',
        ),
        migrations.AddField(
            model_name='genomecatalogue',
            name='genome_count',
            field=models.IntegerField(blank=True, db_column='GENOME_COUNT', null=True),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0033_multiple_genome_cats.set_catalogue_biome,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0033_multiple_genome_cats.calculate_genomes_count,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        migrations.AlterUniqueTogether(
            name='genomecataloguedownload',
            unique_together={('realname', 'alias', 'genome_catalogue')},
        ),
        migrations.RemoveField(
            model_name='genome',
            name='pangenome_eggnog_coverage',
        ),
        migrations.RemoveField(
            model_name='genome',
            name='pangenome_ipr_coverage',
        ),
        migrations.RemoveField(
            model_name='genomecogcounts',
            name='pangenome_count',
        ),
        migrations.RemoveField(
            model_name='genomekeggclasscounts',
            name='pangenome_count',
        ),
        migrations.RemoveField(
            model_name='genomekeggmodulecounts',
            name='pangenome_count',
        ),
        migrations.RemoveField(
            model_name='genome',
            name='cmseq',
        ),
        migrations.RemoveField(
            model_name='genome',
            name='taxincons',
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0036_auto_20211202_1412.create_pangenome_download_descriptions,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        migrations.RemoveField(
            model_name='genome',
            name='num_genomes_non_redundant',
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0037_remove_genome_num_genomes_non_redundant.create_pangenome_download_descriptions,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        migrations.CreateModel(
            name='LegacyAssembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_accession', models.CharField(db_column='LEGACY_ACCESSION', db_index=True, max_length=80, verbose_name='Legacy assembly')),
                ('new_accession', models.CharField(db_column='NEW_ACCESSION', max_length=80, verbose_name='New accession')),
                ('legacy_date', models.DateField(blank=True, db_column='LEGACY_DATE', null=True, verbose_name='Legacy date')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=200, null=True, verbose_name='Comments')),
            ],
            options={
                'db_table': 'LEGACY_ASSEMBLY',
                'unique_together': {('legacy_accession', 'new_accession')},
            },
        ),
        migrations.AddField(
            model_name='run',
            name='ena_study_accession',
            field=models.CharField(blank=True, db_column='ENA_STUDY_ACCESSION', help_text='ENA Study accession.', max_length=20, null=True, validators=[emgapi.validators.validate_ena_study_accession]),
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='is_private',
            field=models.BooleanField(db_column='IS_PRIVATE', default=True),
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='is_suppressed',
            field=models.BooleanField(db_column='IS_SUPPRESSED', default=False),
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (6, 'Killed'),
                                                           (7, 'Temporary Suppressed'), (8, 'Temporary Killed')],
                                      db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AddField(
            model_name='analysisjob',
            name='suppressed_at',
            field=models.DateTimeField(blank=True, db_column='SUPPRESSED_AT', null=True),
        ),
        migrations.AddField(
            model_name='assembly',
            name='is_private',
            field=models.BooleanField(db_column='IS_PRIVATE', default=True),
        ),
        migrations.AddField(
            model_name='assembly',
            name='is_suppressed',
            field=models.BooleanField(db_column='IS_SUPPRESSED', default=False),
        ),
        migrations.AddField(
            model_name='assembly',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (6, 'Killed'),
                                                           (7, 'Temporary Suppressed'), (8, 'Temporary Killed')],
                                      db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AddField(
            model_name='assembly',
            name='suppressed_at',
            field=models.DateTimeField(blank=True, db_column='SUPPRESSED_AT', null=True),
        ),
        migrations.AddField(
            model_name='run',
            name='is_private',
            field=models.BooleanField(db_column='IS_PRIVATE', default=True),
        ),
        migrations.AddField(
            model_name='run',
            name='is_suppressed',
            field=models.BooleanField(db_column='IS_SUPPRESSED', default=False),
        ),
        migrations.AddField(
            model_name='run',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (6, 'Killed'),
                                                           (7, 'Temporary Suppressed'), (8, 'Temporary Killed')],
                                      db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AddField(
            model_name='run',
            name='suppressed_at',
            field=models.DateTimeField(blank=True, db_column='SUPPRESSED_AT', null=True),
        ),
        migrations.AddField(
            model_name='sample',
            name='is_private',
            field=models.BooleanField(db_column='IS_PRIVATE', default=True),
        ),
        migrations.AddField(
            model_name='sample',
            name='is_suppressed',
            field=models.BooleanField(db_column='IS_SUPPRESSED', default=False),
        ),
        migrations.AddField(
            model_name='sample',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (6, 'Killed'),
                                                           (7, 'Temporary Suppressed'), (8, 'Temporary Killed')],
                                      db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AddField(
            model_name='sample',
            name='suppressed_at',
            field=models.DateTimeField(blank=True, db_column='SUPPRESSED_AT', null=True),
        ),
        migrations.AlterField(
            model_name='study',
            name='is_public',
            field=models.IntegerField(db_column='IS_PUBLIC', default=False),
        ),
        migrations.AddField(
            model_name='study',
            name='is_private',
            field=models.BooleanField(db_column='IS_PRIVATE', default=True),
        ),
        migrations.AddField(
            model_name='study',
            name='is_suppressed',
            field=models.BooleanField(db_column='IS_SUPPRESSED', default=False),
        ),
        migrations.AddField(
            model_name='study',
            name='suppressed_at',
            field=models.DateTimeField(blank=True, db_column='SUPPRESSED_AT', null=True),
        ),
        migrations.AddField(
            model_name='study',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (6, 'Killed'),
                                                           (7, 'Temporary Suppressed'), (8, 'Temporary Killed')],
                                      db_column='SUPPRESSION_REASON', null=True),
        ),
        # # migrations.RunPython(
        # #     code=emgapi.migrations.0041_migrate_status_to_suppressed_and_private.migrate_the_status_field,
        # #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # # ),
        migrations.RemoveField(
            model_name='analysisjob',
            name='run_status_id',
        ),
        migrations.RemoveField(
            model_name='assembly',
            name='status_id',
        ),
        migrations.RemoveField(
            model_name='run',
            name='status_id',
        ),
        migrations.RemoveField(
            model_name='sample',
            name='is_public',
        ),
        migrations.RemoveField(
            model_name='study',
            name='is_public',
        ),
        migrations.AlterField(
            model_name='analysisjob',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (5, 'Suppressed'), (6, 'Killed'), (7, 'Temporary Suppressed'), (8, 'Temporary Killed')], db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AlterField(
            model_name='assembly',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (5, 'Suppressed'), (6, 'Killed'), (7, 'Temporary Suppressed'), (8, 'Temporary Killed')], db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AlterField(
            model_name='run',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (5, 'Suppressed'), (6, 'Killed'), (7, 'Temporary Suppressed'), (8, 'Temporary Killed')], db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AlterField(
            model_name='sample',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (5, 'Suppressed'), (6, 'Killed'), (7, 'Temporary Suppressed'), (8, 'Temporary Killed')], db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.AlterField(
            model_name='study',
            name='suppression_reason',
            field=models.IntegerField(blank=True, choices=[(1, 'Draft'), (3, 'Cancelled'), (5, 'Suppressed'), (6, 'Killed'), (7, 'Temporary Suppressed'), (8, 'Temporary Killed')], db_column='SUPPRESSION_REASON', null=True),
        ),
        migrations.RunPython(
            code=populate_experiment_types,
            reverse_code = django.db.migrations.operations.special.RunPython.noop,
        )
    ]
