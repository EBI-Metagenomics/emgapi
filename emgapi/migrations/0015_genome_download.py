# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-05-09 12:19
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion

group_types = (
    "Genome analysis",
)


def add_group_types(apps, schema_editor):
    DownloadGroupType = apps.get_model("emgapi", "DownloadGroupType")
    _groups = list()
    for group_type in group_types:
        _groups.append(
            DownloadGroupType(group_type=group_type)
        )
    DownloadGroupType.objects.bulk_create(_groups)


def remove_group_types(apps, schema_editor):
    DownloadGroupType = apps.get_model("emgapi", "DownloadGroupType")
    DownloadGroupType.objects.filter(group_type__in=group_types).delete()


file_formats = (
    ("TAB", "tab", False),
)


def add_fileformats(apps, schema_editor):
    FileFormat = apps.get_model("emgapi", "FileFormat")
    _formats = list()
    for file_format in file_formats:
        _formats.append(
            FileFormat(
                format_name=file_format[0],
                format_extension=file_format[1],
                compression=file_format[2],
            )
        )
    FileFormat.objects.bulk_create(_formats)


def remove_file_formats(apps, schema_editor):
    FileFormat = apps.get_model("emgapi", "FileFormat")
    for name, ext, compression in file_formats:
        FileFormat.objects.filter(format_name=name,
                                 format_extension=ext,
                                 compression=compression).delete()


downloads = (
    ("Protein coding sequences of the reference genome.", "Genome CDS",),
    ("Genome sequence of the reference genome.", "Genome SEQ",),
    ("Protein sequence of the full species pan-genome.",
     "Protein sequence (full)",),
    ("Protein sequence of the accessory genome.",
     "Protein sequence (accessory)",),
    ("Protein sequence of the core genome", "Protein sequence (core)",),
    ("Raw output of eggNOG-mapper.", "Raw output of eggNOG-mapper",),
    ("Raw output of InterProScan", "Raw output of InterProScan",),
)


def add_download_description(apps, schema_editor):
    DownloadDescriptionLabel = apps.get_model("emgapi",
                                              "DownloadDescriptionLabel")
    _downloads = list()
    for d in downloads:
        _downloads.append(
            DownloadDescriptionLabel(
                description=d[0],
                description_label=d[1]
            )
        )
    DownloadDescriptionLabel.objects.bulk_create(_downloads)


def remove_download_description(apps, schema_editor):
    DownloadDescriptionLabel = apps.get_model("emgapi",
                                              "DownloadDescriptionLabel")
    for desc, desc_label in downloads:
        DownloadDescriptionLabel.objects.filter(description=desc,
                                                description_label=desc_label) \
            .delete()


class Migration(migrations.Migration):
    dependencies = [
        ('emgapi', '0014_genome_stats_cogs_kegg_ipr'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenomeDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('realname',
                 models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('release_version',
                 models.CharField(blank=True, db_column='VERSION',
                                  max_length=30, null=True)),
                ('description',
                 models.ForeignKey(blank=True, db_column='DESCRIPTION_ID',
                                   null=True,
                                   on_delete=django.db.models.deletion.CASCADE,
                                   to='emgapi.DownloadDescriptionLabel')),
                ('file_format',
                 models.ForeignKey(blank=True, db_column='FORMAT_ID',
                                   null=True,
                                   on_delete=django.db.models.deletion.CASCADE,
                                   to='emgapi.FileFormat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID',
                                             on_delete=django.db.models.deletion.CASCADE,
                                             to='emgapi.Genome')),
                ('group_type',
                 models.ForeignKey(blank=True, db_column='GROUP_ID', null=True,
                                   on_delete=django.db.models.deletion.CASCADE,
                                   to='emgapi.DownloadGroupType')),
                ('parent_id',
                 models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID',
                                   null=True,
                                   on_delete=django.db.models.deletion.CASCADE,
                                   related_name='parent',
                                   to='emgapi.GenomeDownload')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID',
                                             null=True,
                                             on_delete=django.db.models.deletion.CASCADE,
                                             to='emgapi.DownloadSubdir')),
            ],
            options={
                'db_table': 'GENOME_DOWNLOAD',
                'ordering': ('release_version', 'group_type', 'alias'),
            },
        ),
        migrations.AlterUniqueTogether(
            name='genomedownload',
            unique_together=set([('realname', 'alias', 'release_version')]),
        ),
        migrations.AddField(
            model_name='genome',
            name='result_directory',
            field=models.CharField(blank=True, db_column='RESULT_DIRECTORY',
                                   max_length=100, null=True),
        ),
        migrations.RunPython(add_group_types, reverse_code=remove_group_types),
        migrations.RunPython(add_fileformats, reverse_code=remove_file_formats),
        migrations.RunPython(add_download_description,
                             reverse_code=remove_download_description),

    ]
