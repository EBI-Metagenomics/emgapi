# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-06-28 17:21
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import emgapi.models



group_types = (
    "Genome analysis",
    "Release"
)


def add_group_types(apps, schema_editor):
    DownloadGroupType = apps.get_model("emgapi", "DownloadGroupType")
    _groups = list()
    for group_type in group_types:
        _groups.append(
            DownloadGroupType(group_type=group_type)
        )
    DownloadGroupType.objects.bulk_create(_groups)


def remove_group_types(apps, schema_editor):
    DownloadGroupType = apps.get_model("emgapi", "DownloadGroupType")
    DownloadGroupType.objects.filter(group_type__in=group_types).delete()


file_formats = (
    ("TAB", "tab", False),
    ("GFF", "gff", False),
    ("JSON", "json", False),
)


def add_fileformats(apps, schema_editor):
    FileFormat = apps.get_model("emgapi", "FileFormat")
    _formats = list()
    for file_format in file_formats:
        _formats.append(
            FileFormat(
                format_name=file_format[0],
                format_extension=file_format[1],
                compression=file_format[2],
            )
        )
    FileFormat.objects.bulk_create(_formats)


def remove_file_formats(apps, schema_editor):
    FileFormat = apps.get_model("emgapi", "FileFormat")
    for name, ext, compression in file_formats:
        FileFormat.objects.filter(format_name=name,
                                 format_extension=ext,
                                 compression=compression).delete()


downloads = (
    ("Protein coding sequences of the reference genome.", "Genome CDS",),
    ("Genome sequence of the reference genome.", "Genome SEQ",),
    ("Protein sequence of the full species pan-genome.",
     "Protein sequence (full)",),
    ("Protein sequence of the accessory genome.",
     "Protein sequence (accessory)",),
    ("Protein sequence of the core genome", "Protein sequence (core)",),
    ("Raw output of eggNOG-mapper.", "Raw output of eggNOG-mapper",),
    ("Raw output of InterProScan", "Raw output of InterProScan",),
    ("Raw output of InterProScan", "Raw output of InterProScan",),
    ("Genome GFF", "Genome GFF"),
    ("Phylogenetic tree", "Phylogenetic tree of release")
)


def add_download_description(apps, schema_editor):
    DownloadDescriptionLabel = apps.get_model("emgapi",
                                              "DownloadDescriptionLabel")
    _downloads = list()
    for d in downloads:
        _downloads.append(
            DownloadDescriptionLabel(
                description=d[0],
                description_label=d[1]
            )
        )
    DownloadDescriptionLabel.objects.bulk_create(_downloads)


def remove_download_description(apps, schema_editor):
    DownloadDescriptionLabel = apps.get_model("emgapi",
                                              "DownloadDescriptionLabel")
    for desc, desc_label in downloads:
        DownloadDescriptionLabel.objects.filter(description=desc,
                                                description_label=desc_label) \
            .delete()

class Migration(migrations.Migration):

    dependencies = [
        ('emgapi', '0012_auto_20190507_1219'),
    ]

    operations = [
        migrations.CreateModel(
            name='CogCat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='NAME', max_length=80, unique=True)),
                ('description', models.CharField(db_column='DESCRIPTION', max_length=80)),
            ],
            options={
                'db_table': 'COG',
            },
        ),
        migrations.CreateModel(
            name='EggNogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(db_column='HOST', db_index=True, max_length=80)),
                ('organism', models.CharField(db_column='ORGANISM', db_index=True, max_length=80)),
                ('description', models.CharField(db_column='DESCRIPTION', db_index=True, max_length=150)),
            ],
            options={
                'db_table': 'EGGNOG_ENTRIES',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(db_column='GENOME_ACCESSION', max_length=40, unique=True)),
                ('length', models.IntegerField(db_column='LENGTH')),
                ('num_contigs', models.IntegerField(db_column='N_CONTIGS')),
                ('n_50', models.IntegerField(db_column='N50')),
                ('gc_content', models.FloatField(db_column='GC_CONTENT')),
                ('type', models.CharField(choices=[(emgapi.models.GenomeTypes('isolate'), 'isolate'), (emgapi.models.GenomeTypes('mag'), 'mag')], db_column='TYPE', max_length=80)),
                ('completeness', models.FloatField(db_column='COMPLETENESS')),
                ('contamination', models.FloatField(db_column='CONTAMINATION')),
                ('rna_5s', models.FloatField(db_column='RNA_5S')),
                ('rna_16s', models.FloatField(db_column='RNA_16S')),
                ('rna_23s', models.FloatField(db_column='RNA_23S')),
                ('trnas', models.FloatField(db_column='T_RNA')),
                ('num_genomes', models.IntegerField(db_column='NUM_GENOMES')),
                ('num_proteins', models.IntegerField(db_column='NUM_PROTEINS')),
                ('pangenome_size', models.IntegerField(db_column='PANGENOME_SIZE')),
                ('core_prop', models.FloatField(db_column='CORE_PROP')),
                ('accessory_prop', models.FloatField(db_column='ACCESSORY_PROP')),
                ('eggnog_prop', models.FloatField(db_column='EGGNOG_PROP')),
                ('ipr_prop', models.FloatField(db_column='IPR_PROP')),
                ('last_update', models.DateTimeField(auto_now=True, db_column='LAST_UPDATE')),
                ('first_created', models.DateTimeField(auto_now_add=True, db_column='FIRST_CREATED')),
                ('result_directory', models.CharField(blank=True, db_column='RESULT_DIRECTORY', max_length=100, null=True)),
            ],
            options={
                'db_table': 'GENOME',
            },
        ),
        migrations.CreateModel(
            name='GenomeCogCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('cog', models.ForeignKey(db_column='COG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.CogCat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_COG_COUNTS',
            },
        ),
        migrations.CreateModel(
            name='GenomeDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('description', models.ForeignKey(blank=True, db_column='DESCRIPTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.DownloadDescriptionLabel')),
                ('file_format', models.ForeignKey(blank=True, db_column='FORMAT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.FileFormat')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
                ('group_type', models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.DownloadGroupType')),
                ('parent_id', models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='emgapi.GenomeDownload')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.DownloadSubdir')),
            ],
            options={
                'db_table': 'GENOME_DOWNLOAD',
                'ordering': ('group_type', 'alias'),
            },
        ),
        migrations.CreateModel(
            name='GenomeEggNogCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('eggnog', models.ForeignKey(db_column='EGGNOG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.EggNogEntry')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_EGGNOG_COUNTS',
            },
        ),
        migrations.CreateModel(
            name='GenomeIprCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_IRP_ENTRIES',
            },
        ),
        migrations.CreateModel(
            name='GenomeKeggCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(db_column='COUNT')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
            ],
            options={
                'db_table': 'GENOME_KEGG_COUNTS',
            },
        ),
        migrations.CreateModel(
            name='IprEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.CharField(db_column='ACCESSION', max_length=80, unique=True)),
            ],
            options={
                'db_table': 'IPR_ENTRIES',
            },
        ),
        migrations.CreateModel(
            name='KeggEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_id', models.CharField(db_column='BRITE_ID', max_length=5, unique=True)),
                ('class_name', models.CharField(db_column='NAME', max_length=80)),
                ('parent', models.ForeignKey(db_column='PARENT', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.KeggEntry')),
            ],
            options={
                'db_table': 'KEGG_BRITE_ENTRIES',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release_version', models.CharField(db_column='RELEASE_VERSION', max_length=20)),
                ('last_update', models.DateTimeField(auto_now=True, db_column='LAST_UPDATE')),
                ('first_created', models.DateTimeField(auto_now_add=True, db_column='FIRST_CREATED')),
                ('result_directory', models.CharField(db_column='RESULT_DIRECTORY', default=0, max_length=100))
            ],
            options={
                'db_table': 'RELEASE',
            },
        ),
        migrations.CreateModel(
            name='ReleaseDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realname', models.CharField(db_column='REAL_NAME', max_length=255)),
                ('alias', models.CharField(db_column='ALIAS', max_length=255)),
                ('description', models.ForeignKey(blank=True, db_column='DESCRIPTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.DownloadDescriptionLabel')),
                ('file_format', models.ForeignKey(blank=True, db_column='FORMAT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.FileFormat')),
                ('group_type', models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.DownloadGroupType')),
                ('parent_id', models.ForeignKey(blank=True, db_column='PARENT_DOWNLOAD_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='emgapi.ReleaseDownload')),
                ('release', models.ForeignKey(db_column='RELEASE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Release')),
                ('subdir', models.ForeignKey(blank=True, db_column='SUBDIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='emgapi.DownloadSubdir')),
            ],
            options={
                'db_table': 'RELEASE_DOWNLOAD',
                'ordering': ('group_type', 'alias'),
            },
        ),
        migrations.CreateModel(
            name='ReleaseGenomes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome', models.ForeignKey(db_column='GENOME_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Genome')),
                ('release', models.ForeignKey(db_column='RELEASE_ID', on_delete=django.db.models.deletion.CASCADE, to='emgapi.Release')),
            ],
            options={
                'db_table': 'RELEASE_GENOMES',
            },
        ),
        migrations.AddField(
            model_name='release',
            name='genomes',
            field=models.ManyToManyField(related_name='genomes', through='emgapi.ReleaseGenomes', to='emgapi.Genome'),
        ),
        migrations.AddField(
            model_name='genomekeggcounts',
            name='kegg_entry',
            field=models.ForeignKey(db_column='KEGG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.KeggEntry'),
        ),
        migrations.AddField(
            model_name='genomeiprcount',
            name='ipr_entry',
            field=models.ForeignKey(db_column='IPR_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='emgapi.IprEntry'),
        ),
        migrations.AddField(
            model_name='genome',
            name='cog_matches',
            field=models.ManyToManyField(through='emgapi.GenomeCogCounts', to='emgapi.CogCat'),
        ),
        migrations.AddField(
            model_name='genome',
            name='ipr_matches',
            field=models.ManyToManyField(through='emgapi.GenomeIprCount', to='emgapi.IprEntry'),
        ),
        migrations.AddField(
            model_name='genome',
            name='kegg_matches',
            field=models.ManyToManyField(through='emgapi.GenomeKeggCounts', to='emgapi.KeggEntry'),
        ),
        migrations.AddField(
            model_name='genome',
            name='releases',
            field=models.ManyToManyField(related_name='releases', through='emgapi.ReleaseGenomes', to='emgapi.Release'),
        ),
        migrations.AlterUniqueTogether(
            name='eggnogentry',
            unique_together=set([('host', 'organism', 'description')]),
        ),
        migrations.AlterUniqueTogether(
            name='releasegenomes',
            unique_together=set([('release', 'genome')]),
        ),
        migrations.AlterUniqueTogether(
            name='releasedownload',
            unique_together=set([('realname', 'alias')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomekeggcounts',
            unique_together=set([('genome', 'kegg_entry')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomeiprcount',
            unique_together=set([('genome', 'ipr_entry')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomeeggnogcounts',
            unique_together=set([('genome', 'eggnog')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomedownload',
            unique_together=set([('realname', 'alias')]),
        ),
        migrations.AlterUniqueTogether(
            name='genomecogcounts',
            unique_together=set([('genome', 'cog')]),
        ),
        migrations.RunPython(add_group_types, reverse_code=remove_group_types),
        migrations.RunPython(add_fileformats,
                             reverse_code=remove_file_formats),
        migrations.RunPython(add_download_description,
                             reverse_code=remove_download_description),
    ]
